# Generated from HogQLParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,161,1325,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,1,0,5,0,178,8,0,10,0,12,0,181,9,0,1,
        0,1,0,1,1,1,1,3,1,187,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,196,8,
        3,1,4,1,4,1,4,5,4,201,8,4,10,4,12,4,204,9,4,1,4,3,4,207,8,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,221,8,5,1,6,1,6,
        3,6,225,8,6,1,6,3,6,228,8,6,1,7,1,7,3,7,232,8,7,1,7,3,7,235,8,7,
        1,8,1,8,1,8,1,8,1,8,3,8,242,8,8,1,8,1,8,3,8,246,8,8,1,8,1,8,1,9,
        1,9,1,9,5,9,253,8,9,10,9,12,9,256,9,9,1,9,1,9,3,9,260,8,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,3,10,269,8,10,1,11,1,11,1,11,1,11,1,
        11,1,11,3,11,277,8,11,1,12,1,12,1,12,1,12,1,12,3,12,284,8,12,1,12,
        1,12,3,12,288,8,12,1,12,1,12,1,12,1,12,3,12,294,8,12,1,12,1,12,1,
        12,3,12,299,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,307,8,13,1,13,
        1,13,1,13,1,13,1,13,3,13,314,8,13,1,14,1,14,1,14,1,14,3,14,320,8,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,332,8,
        16,1,17,1,17,1,18,1,18,5,18,338,8,18,10,18,12,18,341,9,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,5,20,352,8,20,10,20,12,20,
        355,9,20,1,20,3,20,358,8,20,1,21,1,21,1,21,3,21,363,8,21,1,21,1,
        21,1,22,1,22,1,22,5,22,370,8,22,10,22,12,22,373,9,22,1,23,1,23,3,
        23,377,8,23,1,23,1,23,1,23,1,23,3,23,383,8,23,5,23,385,8,23,10,23,
        12,23,388,9,23,1,24,1,24,3,24,392,8,24,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,400,8,25,1,26,3,26,403,8,26,1,26,1,26,3,26,407,8,26,1,
        26,3,26,410,8,26,1,26,1,26,3,26,414,8,26,1,26,3,26,417,8,26,1,26,
        3,26,420,8,26,1,26,3,26,423,8,26,1,26,3,26,426,8,26,1,26,1,26,3,
        26,430,8,26,1,26,1,26,3,26,434,8,26,1,26,3,26,437,8,26,1,26,3,26,
        440,8,26,1,26,3,26,443,8,26,1,26,1,26,3,26,447,8,26,1,26,3,26,450,
        8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,459,8,28,1,29,1,29,
        1,29,1,30,3,30,465,8,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,484,8,31,10,31,
        12,31,487,9,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,3,34,503,8,34,1,35,1,35,1,35,1,36,1,36,1,36,
        1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,520,8,38,1,38,
        1,38,1,38,1,38,3,38,526,8,38,1,38,1,38,1,38,1,38,3,38,532,8,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,543,8,38,3,38,545,
        8,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,3,41,556,8,41,
        1,41,3,41,559,8,41,1,41,1,41,1,41,1,41,3,41,565,8,41,1,41,1,41,1,
        41,1,41,1,41,1,41,3,41,573,8,41,1,41,1,41,1,41,1,41,5,41,579,8,41,
        10,41,12,41,582,9,41,1,42,3,42,585,8,42,1,42,1,42,1,42,3,42,590,
        8,42,1,42,3,42,593,8,42,1,42,3,42,596,8,42,1,42,1,42,3,42,600,8,
        42,1,42,1,42,3,42,604,8,42,1,42,3,42,607,8,42,3,42,609,8,42,1,42,
        3,42,612,8,42,1,42,1,42,3,42,616,8,42,1,42,1,42,3,42,620,8,42,1,
        42,3,42,623,8,42,3,42,625,8,42,3,42,627,8,42,1,43,1,43,1,43,3,43,
        632,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,643,8,
        44,1,45,1,45,1,45,1,45,3,45,649,8,45,1,46,1,46,1,46,5,46,654,8,46,
        10,46,12,46,657,9,46,1,47,1,47,3,47,661,8,47,1,47,1,47,3,47,665,
        8,47,1,47,1,47,3,47,669,8,47,1,48,1,48,1,48,1,48,3,48,675,8,48,3,
        48,677,8,48,1,49,1,49,1,49,5,49,682,8,49,10,49,12,49,685,9,49,1,
        50,1,50,1,50,1,50,1,51,3,51,692,8,51,1,51,3,51,695,8,51,1,51,3,51,
        698,8,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,
        1,55,1,55,1,55,1,55,1,55,1,55,3,55,717,8,55,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,731,8,56,1,57,1,57,
        1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,745,8,58,
        10,58,12,58,748,9,58,1,58,3,58,751,8,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,5,58,760,8,58,10,58,12,58,763,9,58,1,58,3,58,766,8,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,775,8,58,10,58,12,58,778,
        9,58,1,58,3,58,781,8,58,1,58,1,58,1,58,1,58,1,58,3,58,788,8,58,1,
        58,1,58,3,58,792,8,58,1,59,1,59,1,59,5,59,797,8,59,10,59,12,59,800,
        9,59,1,59,3,59,803,8,59,1,60,1,60,1,60,3,60,808,8,60,1,60,1,60,1,
        60,1,60,1,60,4,60,815,8,60,11,60,12,60,816,1,60,1,60,3,60,821,8,
        60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,845,8,60,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,1,60,3,60,862,8,60,1,60,1,60,1,60,1,60,3,60,868,8,60,1,60,3,60,
        871,8,60,1,60,3,60,874,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,3,60,884,8,60,1,60,1,60,1,60,1,60,3,60,890,8,60,1,60,3,60,893,
        8,60,1,60,3,60,896,8,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,904,8,
        60,1,60,3,60,907,8,60,1,60,1,60,3,60,911,8,60,1,60,3,60,914,8,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,
        928,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,3,60,945,8,60,1,60,1,60,1,60,3,60,950,8,60,1,
        60,1,60,1,60,3,60,955,8,60,1,60,1,60,1,60,1,60,3,60,961,8,60,1,60,
        1,60,1,60,1,60,1,60,3,60,968,8,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,3,60,980,8,60,1,60,1,60,3,60,984,8,60,1,60,3,
        60,987,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,996,8,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1010,
        8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,3,60,1026,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,3,60,1055,8,60,1,60,1,60,1,60,1,60,
        1,60,1,60,3,60,1063,8,60,5,60,1065,8,60,10,60,12,60,1068,9,60,1,
        61,1,61,1,61,1,61,5,61,1074,8,61,10,61,12,61,1077,9,61,1,61,3,61,
        1080,8,61,1,61,1,61,1,61,1,61,1,61,5,61,1087,8,61,10,61,12,61,1090,
        9,61,1,61,3,61,1093,8,61,1,61,1,61,3,61,1097,8,61,1,61,1,61,1,61,
        3,61,1102,8,61,1,62,1,62,1,62,5,62,1107,8,62,10,62,12,62,1110,9,
        62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1118,8,62,10,62,12,62,1121,
        9,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1129,8,62,1,62,1,62,1,62,
        1,62,1,62,3,62,1136,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,3,63,1149,8,63,1,64,1,64,1,64,5,64,1154,8,64,10,64,
        12,64,1157,9,64,1,64,3,64,1160,8,64,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,3,65,1172,8,65,1,66,1,66,1,66,1,66,3,66,1178,
        8,66,1,66,3,66,1181,8,66,1,67,1,67,1,67,5,67,1186,8,67,10,67,12,
        67,1189,9,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1200,
        8,68,1,68,1,68,1,68,1,68,3,68,1206,8,68,5,68,1208,8,68,10,68,12,
        68,1211,9,68,1,69,1,69,1,69,3,69,1216,8,69,1,69,1,69,1,70,1,70,1,
        70,3,70,1223,8,70,1,70,1,70,1,71,1,71,1,71,5,71,1230,8,71,10,71,
        12,71,1233,9,71,1,71,3,71,1236,8,71,1,72,1,72,1,73,1,73,1,73,1,73,
        1,73,1,73,3,73,1246,8,73,3,73,1248,8,73,1,74,3,74,1251,8,74,1,74,
        1,74,1,74,1,74,1,74,1,74,3,74,1259,8,74,1,75,1,75,1,75,3,75,1264,
        8,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,3,79,1274,8,79,1,80,
        1,80,1,80,3,80,1279,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,
        1,83,1,83,3,83,1291,8,83,1,84,1,84,5,84,1295,8,84,10,84,12,84,1298,
        9,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,1307,8,85,1,86,1,86,
        5,86,1311,8,86,10,86,12,86,1314,9,86,1,86,1,86,1,87,1,87,1,87,1,
        87,1,87,3,87,1323,8,87,1,87,0,3,82,120,136,88,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,0,17,2,0,31,31,36,36,2,0,18,18,76,76,2,0,45,
        45,53,53,3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,82,82,2,0,53,53,75,75,2,
        0,1,1,4,4,2,0,7,7,22,23,2,0,30,30,51,51,2,0,73,73,78,78,3,0,10,10,
        52,52,92,92,2,0,42,42,55,55,1,0,109,110,2,0,120,120,141,141,7,0,
        21,21,39,39,57,58,72,72,80,80,99,99,105,105,18,0,1,13,15,20,22,28,
        30,30,32,35,37,38,40,43,45,45,47,53,55,56,60,60,62,71,73,79,81,85,
        87,94,96,98,100,101,103,104,4,0,20,20,30,30,40,40,50,50,1499,0,179,
        1,0,0,0,2,186,1,0,0,0,4,188,1,0,0,0,6,190,1,0,0,0,8,197,1,0,0,0,
        10,220,1,0,0,0,12,222,1,0,0,0,14,229,1,0,0,0,16,236,1,0,0,0,18,249,
        1,0,0,0,20,261,1,0,0,0,22,270,1,0,0,0,24,278,1,0,0,0,26,300,1,0,
        0,0,28,315,1,0,0,0,30,324,1,0,0,0,32,329,1,0,0,0,34,333,1,0,0,0,
        36,335,1,0,0,0,38,344,1,0,0,0,40,348,1,0,0,0,42,362,1,0,0,0,44,366,
        1,0,0,0,46,376,1,0,0,0,48,391,1,0,0,0,50,399,1,0,0,0,52,402,1,0,
        0,0,54,451,1,0,0,0,56,454,1,0,0,0,58,460,1,0,0,0,60,464,1,0,0,0,
        62,470,1,0,0,0,64,488,1,0,0,0,66,491,1,0,0,0,68,494,1,0,0,0,70,504,
        1,0,0,0,72,507,1,0,0,0,74,511,1,0,0,0,76,544,1,0,0,0,78,546,1,0,
        0,0,80,549,1,0,0,0,82,564,1,0,0,0,84,626,1,0,0,0,86,631,1,0,0,0,
        88,642,1,0,0,0,90,644,1,0,0,0,92,650,1,0,0,0,94,658,1,0,0,0,96,676,
        1,0,0,0,98,678,1,0,0,0,100,686,1,0,0,0,102,691,1,0,0,0,104,699,1,
        0,0,0,106,703,1,0,0,0,108,707,1,0,0,0,110,716,1,0,0,0,112,730,1,
        0,0,0,114,732,1,0,0,0,116,791,1,0,0,0,118,793,1,0,0,0,120,954,1,
        0,0,0,122,1096,1,0,0,0,124,1135,1,0,0,0,126,1148,1,0,0,0,128,1150,
        1,0,0,0,130,1171,1,0,0,0,132,1180,1,0,0,0,134,1182,1,0,0,0,136,1199,
        1,0,0,0,138,1212,1,0,0,0,140,1222,1,0,0,0,142,1226,1,0,0,0,144,1237,
        1,0,0,0,146,1247,1,0,0,0,148,1250,1,0,0,0,150,1263,1,0,0,0,152,1265,
        1,0,0,0,154,1267,1,0,0,0,156,1269,1,0,0,0,158,1273,1,0,0,0,160,1278,
        1,0,0,0,162,1280,1,0,0,0,164,1284,1,0,0,0,166,1290,1,0,0,0,168,1292,
        1,0,0,0,170,1306,1,0,0,0,172,1308,1,0,0,0,174,1322,1,0,0,0,176,178,
        3,2,1,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,
        1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,5,0,0,1,183,1,1,
        0,0,0,184,187,3,6,3,0,185,187,3,10,5,0,186,184,1,0,0,0,186,185,1,
        0,0,0,187,3,1,0,0,0,188,189,3,120,60,0,189,5,1,0,0,0,190,191,5,54,
        0,0,191,195,3,160,80,0,192,193,5,117,0,0,193,194,5,124,0,0,194,196,
        3,4,2,0,195,192,1,0,0,0,195,196,1,0,0,0,196,7,1,0,0,0,197,202,3,
        160,80,0,198,199,5,118,0,0,199,201,3,160,80,0,200,198,1,0,0,0,201,
        204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,206,1,0,0,0,204,
        202,1,0,0,0,205,207,5,118,0,0,206,205,1,0,0,0,206,207,1,0,0,0,207,
        9,1,0,0,0,208,221,3,12,6,0,209,221,3,14,7,0,210,221,3,18,9,0,211,
        221,3,20,10,0,212,221,3,22,11,0,213,221,3,26,13,0,214,221,3,24,12,
        0,215,221,3,28,14,0,216,221,3,30,15,0,217,221,3,36,18,0,218,221,
        3,32,16,0,219,221,3,34,17,0,220,208,1,0,0,0,220,209,1,0,0,0,220,
        210,1,0,0,0,220,211,1,0,0,0,220,212,1,0,0,0,220,213,1,0,0,0,220,
        214,1,0,0,0,220,215,1,0,0,0,220,216,1,0,0,0,220,217,1,0,0,0,220,
        218,1,0,0,0,220,219,1,0,0,0,221,11,1,0,0,0,222,224,5,74,0,0,223,
        225,3,4,2,0,224,223,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,
        228,5,152,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,13,1,0,0,0,229,
        231,5,86,0,0,230,232,3,4,2,0,231,230,1,0,0,0,231,232,1,0,0,0,232,
        234,1,0,0,0,233,235,5,152,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,
        15,1,0,0,0,236,245,5,14,0,0,237,238,5,132,0,0,238,241,3,160,80,0,
        239,240,5,117,0,0,240,242,3,160,80,0,241,239,1,0,0,0,241,242,1,0,
        0,0,242,243,1,0,0,0,243,244,5,151,0,0,244,246,1,0,0,0,245,237,1,
        0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,3,36,18,0,248,17,1,
        0,0,0,249,250,5,95,0,0,250,254,3,36,18,0,251,253,3,16,8,0,252,251,
        1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,259,
        1,0,0,0,256,254,1,0,0,0,257,258,5,29,0,0,258,260,3,36,18,0,259,257,
        1,0,0,0,259,260,1,0,0,0,260,19,1,0,0,0,261,262,5,41,0,0,262,263,
        5,132,0,0,263,264,3,4,2,0,264,265,5,151,0,0,265,268,3,10,5,0,266,
        267,5,25,0,0,267,269,3,10,5,0,268,266,1,0,0,0,268,269,1,0,0,0,269,
        21,1,0,0,0,270,271,5,102,0,0,271,272,5,132,0,0,272,273,3,4,2,0,273,
        274,5,151,0,0,274,276,3,10,5,0,275,277,5,152,0,0,276,275,1,0,0,0,
        276,277,1,0,0,0,277,23,1,0,0,0,278,279,5,33,0,0,279,283,5,132,0,
        0,280,284,3,6,3,0,281,284,3,30,15,0,282,284,3,4,2,0,283,280,1,0,
        0,0,283,281,1,0,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,
        0,0,285,287,5,152,0,0,286,288,3,4,2,0,287,286,1,0,0,0,287,288,1,
        0,0,0,288,289,1,0,0,0,289,293,5,152,0,0,290,294,3,6,3,0,291,294,
        3,30,15,0,292,294,3,4,2,0,293,290,1,0,0,0,293,291,1,0,0,0,293,292,
        1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,151,0,0,296,298,
        3,10,5,0,297,299,5,152,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,25,
        1,0,0,0,300,301,5,33,0,0,301,302,5,132,0,0,302,303,5,54,0,0,303,
        306,3,160,80,0,304,305,5,118,0,0,305,307,3,160,80,0,306,304,1,0,
        0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,5,43,0,0,309,310,3,4,
        2,0,310,311,5,151,0,0,311,313,3,10,5,0,312,314,5,152,0,0,313,312,
        1,0,0,0,313,314,1,0,0,0,314,27,1,0,0,0,315,316,7,0,0,0,316,317,3,
        160,80,0,317,319,5,132,0,0,318,320,3,8,4,0,319,318,1,0,0,0,319,320,
        1,0,0,0,320,321,1,0,0,0,321,322,5,151,0,0,322,323,3,36,18,0,323,
        29,1,0,0,0,324,325,3,4,2,0,325,326,5,117,0,0,326,327,5,124,0,0,327,
        328,3,4,2,0,328,31,1,0,0,0,329,331,3,4,2,0,330,332,5,152,0,0,331,
        330,1,0,0,0,331,332,1,0,0,0,332,33,1,0,0,0,333,334,5,152,0,0,334,
        35,1,0,0,0,335,339,5,130,0,0,336,338,3,2,1,0,337,336,1,0,0,0,338,
        341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,
        339,1,0,0,0,342,343,5,149,0,0,343,37,1,0,0,0,344,345,3,4,2,0,345,
        346,5,117,0,0,346,347,3,4,2,0,347,39,1,0,0,0,348,353,3,38,19,0,349,
        350,5,118,0,0,350,352,3,38,19,0,351,349,1,0,0,0,352,355,1,0,0,0,
        353,351,1,0,0,0,353,354,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,
        356,358,5,118,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,41,1,0,0,0,
        359,363,3,48,24,0,360,363,3,52,26,0,361,363,3,124,62,0,362,359,1,
        0,0,0,362,360,1,0,0,0,362,361,1,0,0,0,363,364,1,0,0,0,364,365,5,
        0,0,1,365,43,1,0,0,0,366,371,3,50,25,0,367,368,5,46,0,0,368,370,
        3,50,25,0,369,367,1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,
        1,0,0,0,372,45,1,0,0,0,373,371,1,0,0,0,374,377,3,50,25,0,375,377,
        3,44,22,0,376,374,1,0,0,0,376,375,1,0,0,0,377,386,1,0,0,0,378,379,
        5,97,0,0,379,382,5,1,0,0,380,383,3,50,25,0,381,383,3,44,22,0,382,
        380,1,0,0,0,382,381,1,0,0,0,383,385,1,0,0,0,384,378,1,0,0,0,385,
        388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,47,1,0,0,0,388,386,
        1,0,0,0,389,392,3,44,22,0,390,392,3,46,23,0,391,389,1,0,0,0,391,
        390,1,0,0,0,392,49,1,0,0,0,393,400,3,52,26,0,394,395,5,132,0,0,395,
        396,3,48,24,0,396,397,5,151,0,0,397,400,1,0,0,0,398,400,3,164,82,
        0,399,393,1,0,0,0,399,394,1,0,0,0,399,398,1,0,0,0,400,51,1,0,0,0,
        401,403,3,54,27,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,
        0,404,406,5,81,0,0,405,407,5,24,0,0,406,405,1,0,0,0,406,407,1,0,
        0,0,407,409,1,0,0,0,408,410,3,56,28,0,409,408,1,0,0,0,409,410,1,
        0,0,0,410,411,1,0,0,0,411,413,3,118,59,0,412,414,3,58,29,0,413,412,
        1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,417,3,60,30,0,416,415,
        1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,420,3,64,32,0,419,418,
        1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,423,3,66,33,0,422,421,
        1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,426,3,68,34,0,425,424,
        1,0,0,0,425,426,1,0,0,0,426,429,1,0,0,0,427,428,5,104,0,0,428,430,
        7,1,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,433,1,0,0,0,431,432,
        5,104,0,0,432,434,5,91,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,436,
        1,0,0,0,435,437,3,70,35,0,436,435,1,0,0,0,436,437,1,0,0,0,437,439,
        1,0,0,0,438,440,3,62,31,0,439,438,1,0,0,0,439,440,1,0,0,0,440,442,
        1,0,0,0,441,443,3,72,36,0,442,441,1,0,0,0,442,443,1,0,0,0,443,446,
        1,0,0,0,444,447,3,76,38,0,445,447,3,78,39,0,446,444,1,0,0,0,446,
        445,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,450,3,80,40,0,449,
        448,1,0,0,0,449,450,1,0,0,0,450,53,1,0,0,0,451,452,5,104,0,0,452,
        453,3,128,64,0,453,55,1,0,0,0,454,455,5,90,0,0,455,458,5,110,0,0,
        456,457,5,104,0,0,457,459,5,87,0,0,458,456,1,0,0,0,458,459,1,0,0,
        0,459,57,1,0,0,0,460,461,5,34,0,0,461,462,3,82,41,0,462,59,1,0,0,
        0,463,465,7,2,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,
        0,466,467,5,5,0,0,467,468,5,49,0,0,468,469,3,118,59,0,469,61,1,0,
        0,0,470,471,5,103,0,0,471,472,3,160,80,0,472,473,5,6,0,0,473,474,
        5,132,0,0,474,475,3,102,51,0,475,485,5,151,0,0,476,477,5,118,0,0,
        477,478,3,160,80,0,478,479,5,6,0,0,479,480,5,132,0,0,480,481,3,102,
        51,0,481,482,5,151,0,0,482,484,1,0,0,0,483,476,1,0,0,0,484,487,1,
        0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,63,1,0,0,0,487,485,1,0,
        0,0,488,489,5,71,0,0,489,490,3,120,60,0,490,65,1,0,0,0,491,492,5,
        101,0,0,492,493,3,120,60,0,493,67,1,0,0,0,494,495,5,37,0,0,495,502,
        5,11,0,0,496,497,7,1,0,0,497,498,5,132,0,0,498,499,3,118,59,0,499,
        500,5,151,0,0,500,503,1,0,0,0,501,503,3,118,59,0,502,496,1,0,0,0,
        502,501,1,0,0,0,503,69,1,0,0,0,504,505,5,38,0,0,505,506,3,120,60,
        0,506,71,1,0,0,0,507,508,5,66,0,0,508,509,5,11,0,0,509,510,3,92,
        46,0,510,73,1,0,0,0,511,512,5,66,0,0,512,513,5,11,0,0,513,514,3,
        118,59,0,514,75,1,0,0,0,515,516,5,56,0,0,516,519,3,120,60,0,517,
        518,5,118,0,0,518,520,3,120,60,0,519,517,1,0,0,0,519,520,1,0,0,0,
        520,525,1,0,0,0,521,522,5,104,0,0,522,526,5,87,0,0,523,524,5,11,
        0,0,524,526,3,118,59,0,525,521,1,0,0,0,525,523,1,0,0,0,525,526,1,
        0,0,0,526,545,1,0,0,0,527,528,5,56,0,0,528,531,3,120,60,0,529,530,
        5,104,0,0,530,532,5,87,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,533,
        1,0,0,0,533,534,5,63,0,0,534,535,3,120,60,0,535,545,1,0,0,0,536,
        537,5,56,0,0,537,538,3,120,60,0,538,539,5,63,0,0,539,542,3,120,60,
        0,540,541,5,11,0,0,541,543,3,118,59,0,542,540,1,0,0,0,542,543,1,
        0,0,0,543,545,1,0,0,0,544,515,1,0,0,0,544,527,1,0,0,0,544,536,1,
        0,0,0,545,77,1,0,0,0,546,547,5,63,0,0,547,548,3,120,60,0,548,79,
        1,0,0,0,549,550,5,83,0,0,550,551,3,98,49,0,551,81,1,0,0,0,552,553,
        6,41,-1,0,553,555,3,136,68,0,554,556,5,28,0,0,555,554,1,0,0,0,555,
        556,1,0,0,0,556,558,1,0,0,0,557,559,3,90,45,0,558,557,1,0,0,0,558,
        559,1,0,0,0,559,565,1,0,0,0,560,561,5,132,0,0,561,562,3,82,41,0,
        562,563,5,151,0,0,563,565,1,0,0,0,564,552,1,0,0,0,564,560,1,0,0,
        0,565,580,1,0,0,0,566,567,10,3,0,0,567,568,3,86,43,0,568,569,3,82,
        41,4,569,579,1,0,0,0,570,572,10,4,0,0,571,573,3,84,42,0,572,571,
        1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,575,5,49,0,0,575,576,
        3,82,41,0,576,577,3,88,44,0,577,579,1,0,0,0,578,566,1,0,0,0,578,
        570,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,
        83,1,0,0,0,582,580,1,0,0,0,583,585,7,3,0,0,584,583,1,0,0,0,584,585,
        1,0,0,0,585,586,1,0,0,0,586,593,5,45,0,0,587,589,5,45,0,0,588,590,
        7,3,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,593,1,0,0,0,591,593,
        7,3,0,0,592,584,1,0,0,0,592,587,1,0,0,0,592,591,1,0,0,0,593,627,
        1,0,0,0,594,596,7,4,0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,
        1,0,0,0,597,599,7,5,0,0,598,600,5,67,0,0,599,598,1,0,0,0,599,600,
        1,0,0,0,600,609,1,0,0,0,601,603,7,5,0,0,602,604,5,67,0,0,603,602,
        1,0,0,0,603,604,1,0,0,0,604,606,1,0,0,0,605,607,7,4,0,0,606,605,
        1,0,0,0,606,607,1,0,0,0,607,609,1,0,0,0,608,595,1,0,0,0,608,601,
        1,0,0,0,609,627,1,0,0,0,610,612,7,6,0,0,611,610,1,0,0,0,611,612,
        1,0,0,0,612,613,1,0,0,0,613,615,5,35,0,0,614,616,5,67,0,0,615,614,
        1,0,0,0,615,616,1,0,0,0,616,625,1,0,0,0,617,619,5,35,0,0,618,620,
        5,67,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,0,621,623,
        7,6,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,611,
        1,0,0,0,624,617,1,0,0,0,625,627,1,0,0,0,626,592,1,0,0,0,626,608,
        1,0,0,0,626,624,1,0,0,0,627,85,1,0,0,0,628,629,5,17,0,0,629,632,
        5,49,0,0,630,632,5,118,0,0,631,628,1,0,0,0,631,630,1,0,0,0,632,87,
        1,0,0,0,633,634,5,64,0,0,634,643,3,118,59,0,635,636,5,98,0,0,636,
        637,5,132,0,0,637,638,3,118,59,0,638,639,5,151,0,0,639,643,1,0,0,
        0,640,641,5,98,0,0,641,643,3,118,59,0,642,633,1,0,0,0,642,635,1,
        0,0,0,642,640,1,0,0,0,643,89,1,0,0,0,644,645,5,79,0,0,645,648,3,
        96,48,0,646,647,5,63,0,0,647,649,3,96,48,0,648,646,1,0,0,0,648,649,
        1,0,0,0,649,91,1,0,0,0,650,655,3,94,47,0,651,652,5,118,0,0,652,654,
        3,94,47,0,653,651,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,
        1,0,0,0,656,93,1,0,0,0,657,655,1,0,0,0,658,660,3,120,60,0,659,661,
        7,7,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,664,1,0,0,0,662,663,
        5,62,0,0,663,665,7,8,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,668,
        1,0,0,0,666,667,5,16,0,0,667,669,5,112,0,0,668,666,1,0,0,0,668,669,
        1,0,0,0,669,95,1,0,0,0,670,677,3,164,82,0,671,674,3,148,74,0,672,
        673,5,153,0,0,673,675,3,148,74,0,674,672,1,0,0,0,674,675,1,0,0,0,
        675,677,1,0,0,0,676,670,1,0,0,0,676,671,1,0,0,0,677,97,1,0,0,0,678,
        683,3,100,50,0,679,680,5,118,0,0,680,682,3,100,50,0,681,679,1,0,
        0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,99,1,0,0,
        0,685,683,1,0,0,0,686,687,3,160,80,0,687,688,5,124,0,0,688,689,3,
        150,75,0,689,101,1,0,0,0,690,692,3,104,52,0,691,690,1,0,0,0,691,
        692,1,0,0,0,692,694,1,0,0,0,693,695,3,106,53,0,694,693,1,0,0,0,694,
        695,1,0,0,0,695,697,1,0,0,0,696,698,3,108,54,0,697,696,1,0,0,0,697,
        698,1,0,0,0,698,103,1,0,0,0,699,700,5,69,0,0,700,701,5,11,0,0,701,
        702,3,118,59,0,702,105,1,0,0,0,703,704,5,66,0,0,704,705,5,11,0,0,
        705,706,3,92,46,0,706,107,1,0,0,0,707,708,7,9,0,0,708,709,3,110,
        55,0,709,109,1,0,0,0,710,717,3,112,56,0,711,712,5,9,0,0,712,713,
        3,112,56,0,713,714,5,2,0,0,714,715,3,112,56,0,715,717,1,0,0,0,716,
        710,1,0,0,0,716,711,1,0,0,0,717,111,1,0,0,0,718,719,5,19,0,0,719,
        731,5,77,0,0,720,721,5,96,0,0,721,731,5,70,0,0,722,723,5,96,0,0,
        723,731,5,32,0,0,724,725,3,148,74,0,725,726,5,70,0,0,726,731,1,0,
        0,0,727,728,3,148,74,0,728,729,5,32,0,0,729,731,1,0,0,0,730,718,
        1,0,0,0,730,720,1,0,0,0,730,722,1,0,0,0,730,724,1,0,0,0,730,727,
        1,0,0,0,731,113,1,0,0,0,732,733,3,120,60,0,733,734,5,0,0,1,734,115,
        1,0,0,0,735,792,3,160,80,0,736,737,3,160,80,0,737,738,5,132,0,0,
        738,739,3,160,80,0,739,746,3,116,58,0,740,741,5,118,0,0,741,742,
        3,160,80,0,742,743,3,116,58,0,743,745,1,0,0,0,744,740,1,0,0,0,745,
        748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,750,1,0,0,0,748,
        746,1,0,0,0,749,751,5,118,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,
        752,1,0,0,0,752,753,5,151,0,0,753,792,1,0,0,0,754,755,3,160,80,0,
        755,756,5,132,0,0,756,761,3,162,81,0,757,758,5,118,0,0,758,760,3,
        162,81,0,759,757,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,
        1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,764,766,5,118,0,0,765,764,
        1,0,0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,768,5,151,0,0,768,792,
        1,0,0,0,769,770,3,160,80,0,770,771,5,132,0,0,771,776,3,116,58,0,
        772,773,5,118,0,0,773,775,3,116,58,0,774,772,1,0,0,0,775,778,1,0,
        0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,780,1,0,0,0,778,776,1,0,
        0,0,779,781,5,118,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,
        0,0,0,782,783,5,151,0,0,783,792,1,0,0,0,784,785,3,160,80,0,785,787,
        5,132,0,0,786,788,3,118,59,0,787,786,1,0,0,0,787,788,1,0,0,0,788,
        789,1,0,0,0,789,790,5,151,0,0,790,792,1,0,0,0,791,735,1,0,0,0,791,
        736,1,0,0,0,791,754,1,0,0,0,791,769,1,0,0,0,791,784,1,0,0,0,792,
        117,1,0,0,0,793,798,3,120,60,0,794,795,5,118,0,0,795,797,3,120,60,
        0,796,794,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,
        0,799,802,1,0,0,0,800,798,1,0,0,0,801,803,5,118,0,0,802,801,1,0,
        0,0,802,803,1,0,0,0,803,119,1,0,0,0,804,805,6,60,-1,0,805,807,5,
        12,0,0,806,808,3,120,60,0,807,806,1,0,0,0,807,808,1,0,0,0,808,814,
        1,0,0,0,809,810,5,100,0,0,810,811,3,120,60,0,811,812,5,85,0,0,812,
        813,3,120,60,0,813,815,1,0,0,0,814,809,1,0,0,0,815,816,1,0,0,0,816,
        814,1,0,0,0,816,817,1,0,0,0,817,820,1,0,0,0,818,819,5,25,0,0,819,
        821,3,120,60,0,820,818,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,
        823,5,26,0,0,823,955,1,0,0,0,824,825,5,13,0,0,825,826,5,132,0,0,
        826,827,3,120,60,0,827,828,5,6,0,0,828,829,3,116,58,0,829,830,5,
        151,0,0,830,955,1,0,0,0,831,832,5,20,0,0,832,955,5,112,0,0,833,834,
        5,47,0,0,834,835,3,120,60,0,835,836,3,152,76,0,836,955,1,0,0,0,837,
        838,5,84,0,0,838,839,5,132,0,0,839,840,3,120,60,0,840,841,5,34,0,
        0,841,844,3,120,60,0,842,843,5,33,0,0,843,845,3,120,60,0,844,842,
        1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,847,5,151,0,0,847,955,
        1,0,0,0,848,849,5,88,0,0,849,955,5,112,0,0,850,851,5,93,0,0,851,
        852,5,132,0,0,852,853,7,10,0,0,853,854,3,166,83,0,854,855,5,34,0,
        0,855,856,3,120,60,0,856,857,5,151,0,0,857,955,1,0,0,0,858,859,3,
        160,80,0,859,861,5,132,0,0,860,862,3,118,59,0,861,860,1,0,0,0,861,
        862,1,0,0,0,862,863,1,0,0,0,863,864,5,151,0,0,864,873,1,0,0,0,865,
        867,5,132,0,0,866,868,5,24,0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,
        870,1,0,0,0,869,871,3,118,59,0,870,869,1,0,0,0,870,871,1,0,0,0,871,
        872,1,0,0,0,872,874,5,151,0,0,873,865,1,0,0,0,873,874,1,0,0,0,874,
        875,1,0,0,0,875,876,5,68,0,0,876,877,5,132,0,0,877,878,3,102,51,
        0,878,879,5,151,0,0,879,955,1,0,0,0,880,881,3,160,80,0,881,883,5,
        132,0,0,882,884,3,118,59,0,883,882,1,0,0,0,883,884,1,0,0,0,884,885,
        1,0,0,0,885,886,5,151,0,0,886,895,1,0,0,0,887,889,5,132,0,0,888,
        890,5,24,0,0,889,888,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,
        893,3,118,59,0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,
        896,5,151,0,0,895,887,1,0,0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,
        898,5,68,0,0,898,899,3,160,80,0,899,955,1,0,0,0,900,906,3,160,80,
        0,901,903,5,132,0,0,902,904,3,118,59,0,903,902,1,0,0,0,903,904,1,
        0,0,0,904,905,1,0,0,0,905,907,5,151,0,0,906,901,1,0,0,0,906,907,
        1,0,0,0,907,908,1,0,0,0,908,910,5,132,0,0,909,911,5,24,0,0,910,909,
        1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,914,3,118,59,0,913,912,
        1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,916,5,151,0,0,916,955,
        1,0,0,0,917,955,3,124,62,0,918,955,3,168,84,0,919,955,3,150,75,0,
        920,921,5,120,0,0,921,955,3,120,60,20,922,923,5,60,0,0,923,955,3,
        120,60,14,924,925,3,140,70,0,925,926,5,122,0,0,926,928,1,0,0,0,927,
        924,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,955,5,114,0,0,930,
        931,5,132,0,0,931,932,3,48,24,0,932,933,5,151,0,0,933,955,1,0,0,
        0,934,935,5,132,0,0,935,936,3,120,60,0,936,937,5,151,0,0,937,955,
        1,0,0,0,938,939,5,132,0,0,939,940,3,118,59,0,940,941,5,151,0,0,941,
        955,1,0,0,0,942,944,5,131,0,0,943,945,3,118,59,0,944,943,1,0,0,0,
        944,945,1,0,0,0,945,946,1,0,0,0,946,955,5,150,0,0,947,949,5,130,
        0,0,948,950,3,40,20,0,949,948,1,0,0,0,949,950,1,0,0,0,950,951,1,
        0,0,0,951,955,5,149,0,0,952,955,3,122,61,0,953,955,3,132,66,0,954,
        804,1,0,0,0,954,824,1,0,0,0,954,831,1,0,0,0,954,833,1,0,0,0,954,
        837,1,0,0,0,954,848,1,0,0,0,954,850,1,0,0,0,954,858,1,0,0,0,954,
        880,1,0,0,0,954,900,1,0,0,0,954,917,1,0,0,0,954,918,1,0,0,0,954,
        919,1,0,0,0,954,920,1,0,0,0,954,922,1,0,0,0,954,927,1,0,0,0,954,
        930,1,0,0,0,954,934,1,0,0,0,954,938,1,0,0,0,954,942,1,0,0,0,954,
        947,1,0,0,0,954,952,1,0,0,0,954,953,1,0,0,0,955,1066,1,0,0,0,956,
        960,10,19,0,0,957,961,5,114,0,0,958,961,5,153,0,0,959,961,5,140,
        0,0,960,957,1,0,0,0,960,958,1,0,0,0,960,959,1,0,0,0,961,962,1,0,
        0,0,962,1065,3,120,60,20,963,967,10,18,0,0,964,968,5,141,0,0,965,
        968,5,120,0,0,966,968,5,119,0,0,967,964,1,0,0,0,967,965,1,0,0,0,
        967,966,1,0,0,0,968,969,1,0,0,0,969,1065,3,120,60,19,970,995,10,
        17,0,0,971,996,5,123,0,0,972,996,5,124,0,0,973,996,5,135,0,0,974,
        996,5,133,0,0,975,996,5,134,0,0,976,996,5,125,0,0,977,996,5,126,
        0,0,978,980,5,60,0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,981,1,0,
        0,0,981,983,5,43,0,0,982,984,5,15,0,0,983,982,1,0,0,0,983,984,1,
        0,0,0,984,996,1,0,0,0,985,987,5,60,0,0,986,985,1,0,0,0,986,987,1,
        0,0,0,987,988,1,0,0,0,988,996,7,11,0,0,989,996,5,147,0,0,990,996,
        5,148,0,0,991,996,5,137,0,0,992,996,5,128,0,0,993,996,5,129,0,0,
        994,996,5,136,0,0,995,971,1,0,0,0,995,972,1,0,0,0,995,973,1,0,0,
        0,995,974,1,0,0,0,995,975,1,0,0,0,995,976,1,0,0,0,995,977,1,0,0,
        0,995,979,1,0,0,0,995,986,1,0,0,0,995,989,1,0,0,0,995,990,1,0,0,
        0,995,991,1,0,0,0,995,992,1,0,0,0,995,993,1,0,0,0,995,994,1,0,0,
        0,996,997,1,0,0,0,997,1065,3,120,60,18,998,999,10,15,0,0,999,1000,
        5,139,0,0,1000,1065,3,120,60,16,1001,1002,10,13,0,0,1002,1003,5,
        2,0,0,1003,1065,3,120,60,14,1004,1005,10,12,0,0,1005,1006,5,65,0,
        0,1006,1065,3,120,60,13,1007,1009,10,11,0,0,1008,1010,5,60,0,0,1009,
        1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1012,5,9,0,
        0,1012,1013,3,120,60,0,1013,1014,5,2,0,0,1014,1015,3,120,60,12,1015,
        1065,1,0,0,0,1016,1017,10,10,0,0,1017,1018,5,142,0,0,1018,1019,3,
        120,60,0,1019,1020,5,117,0,0,1020,1021,3,120,60,10,1021,1065,1,0,
        0,0,1022,1023,10,30,0,0,1023,1025,5,132,0,0,1024,1026,3,118,59,0,
        1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1065,
        5,151,0,0,1028,1029,10,26,0,0,1029,1030,5,131,0,0,1030,1031,3,120,
        60,0,1031,1032,5,150,0,0,1032,1065,1,0,0,0,1033,1034,10,25,0,0,1034,
        1035,5,122,0,0,1035,1065,5,110,0,0,1036,1037,10,24,0,0,1037,1038,
        5,122,0,0,1038,1065,3,160,80,0,1039,1040,10,23,0,0,1040,1041,5,138,
        0,0,1041,1042,5,131,0,0,1042,1043,3,120,60,0,1043,1044,5,150,0,0,
        1044,1065,1,0,0,0,1045,1046,10,22,0,0,1046,1047,5,138,0,0,1047,1065,
        5,110,0,0,1048,1049,10,21,0,0,1049,1050,5,138,0,0,1050,1065,3,160,
        80,0,1051,1052,10,16,0,0,1052,1054,5,48,0,0,1053,1055,5,60,0,0,1054,
        1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,1065,5,61,
        0,0,1057,1062,10,9,0,0,1058,1059,5,6,0,0,1059,1063,3,160,80,0,1060,
        1061,5,6,0,0,1061,1063,5,112,0,0,1062,1058,1,0,0,0,1062,1060,1,0,
        0,0,1063,1065,1,0,0,0,1064,956,1,0,0,0,1064,963,1,0,0,0,1064,970,
        1,0,0,0,1064,998,1,0,0,0,1064,1001,1,0,0,0,1064,1004,1,0,0,0,1064,
        1007,1,0,0,0,1064,1016,1,0,0,0,1064,1022,1,0,0,0,1064,1028,1,0,0,
        0,1064,1033,1,0,0,0,1064,1036,1,0,0,0,1064,1039,1,0,0,0,1064,1045,
        1,0,0,0,1064,1048,1,0,0,0,1064,1051,1,0,0,0,1064,1057,1,0,0,0,1065,
        1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,121,1,0,0,
        0,1068,1066,1,0,0,0,1069,1070,5,132,0,0,1070,1075,3,160,80,0,1071,
        1072,5,118,0,0,1072,1074,3,160,80,0,1073,1071,1,0,0,0,1074,1077,
        1,0,0,0,1075,1073,1,0,0,0,1075,1076,1,0,0,0,1076,1079,1,0,0,0,1077,
        1075,1,0,0,0,1078,1080,5,118,0,0,1079,1078,1,0,0,0,1079,1080,1,0,
        0,0,1080,1081,1,0,0,0,1081,1082,5,151,0,0,1082,1097,1,0,0,0,1083,
        1088,3,160,80,0,1084,1085,5,118,0,0,1085,1087,3,160,80,0,1086,1084,
        1,0,0,0,1087,1090,1,0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,
        1092,1,0,0,0,1090,1088,1,0,0,0,1091,1093,5,118,0,0,1092,1091,1,0,
        0,0,1092,1093,1,0,0,0,1093,1097,1,0,0,0,1094,1095,5,132,0,0,1095,
        1097,5,151,0,0,1096,1069,1,0,0,0,1096,1083,1,0,0,0,1096,1094,1,0,
        0,0,1097,1098,1,0,0,0,1098,1101,5,113,0,0,1099,1102,3,120,60,0,1100,
        1102,3,36,18,0,1101,1099,1,0,0,0,1101,1100,1,0,0,0,1102,123,1,0,
        0,0,1103,1104,5,134,0,0,1104,1108,3,160,80,0,1105,1107,3,126,63,
        0,1106,1105,1,0,0,0,1107,1110,1,0,0,0,1108,1106,1,0,0,0,1108,1109,
        1,0,0,0,1109,1111,1,0,0,0,1110,1108,1,0,0,0,1111,1112,5,153,0,0,
        1112,1113,5,126,0,0,1113,1136,1,0,0,0,1114,1115,5,134,0,0,1115,1119,
        3,160,80,0,1116,1118,3,126,63,0,1117,1116,1,0,0,0,1118,1121,1,0,
        0,0,1119,1117,1,0,0,0,1119,1120,1,0,0,0,1120,1122,1,0,0,0,1121,1119,
        1,0,0,0,1122,1128,5,126,0,0,1123,1129,3,124,62,0,1124,1125,5,130,
        0,0,1125,1126,3,120,60,0,1126,1127,5,149,0,0,1127,1129,1,0,0,0,1128,
        1123,1,0,0,0,1128,1124,1,0,0,0,1128,1129,1,0,0,0,1129,1130,1,0,0,
        0,1130,1131,5,134,0,0,1131,1132,5,153,0,0,1132,1133,3,160,80,0,1133,
        1134,5,126,0,0,1134,1136,1,0,0,0,1135,1103,1,0,0,0,1135,1114,1,0,
        0,0,1136,125,1,0,0,0,1137,1138,3,160,80,0,1138,1139,5,124,0,0,1139,
        1140,3,166,83,0,1140,1149,1,0,0,0,1141,1142,3,160,80,0,1142,1143,
        5,124,0,0,1143,1144,5,130,0,0,1144,1145,3,120,60,0,1145,1146,5,149,
        0,0,1146,1149,1,0,0,0,1147,1149,3,160,80,0,1148,1137,1,0,0,0,1148,
        1141,1,0,0,0,1148,1147,1,0,0,0,1149,127,1,0,0,0,1150,1155,3,130,
        65,0,1151,1152,5,118,0,0,1152,1154,3,130,65,0,1153,1151,1,0,0,0,
        1154,1157,1,0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,1159,
        1,0,0,0,1157,1155,1,0,0,0,1158,1160,5,118,0,0,1159,1158,1,0,0,0,
        1159,1160,1,0,0,0,1160,129,1,0,0,0,1161,1162,3,160,80,0,1162,1163,
        5,6,0,0,1163,1164,5,132,0,0,1164,1165,3,48,24,0,1165,1166,5,151,
        0,0,1166,1172,1,0,0,0,1167,1168,3,120,60,0,1168,1169,5,6,0,0,1169,
        1170,3,160,80,0,1170,1172,1,0,0,0,1171,1161,1,0,0,0,1171,1167,1,
        0,0,0,1172,131,1,0,0,0,1173,1181,3,164,82,0,1174,1175,3,140,70,0,
        1175,1176,5,122,0,0,1176,1178,1,0,0,0,1177,1174,1,0,0,0,1177,1178,
        1,0,0,0,1178,1179,1,0,0,0,1179,1181,3,134,67,0,1180,1173,1,0,0,0,
        1180,1177,1,0,0,0,1181,133,1,0,0,0,1182,1187,3,160,80,0,1183,1184,
        5,122,0,0,1184,1186,3,160,80,0,1185,1183,1,0,0,0,1186,1189,1,0,0,
        0,1187,1185,1,0,0,0,1187,1188,1,0,0,0,1188,135,1,0,0,0,1189,1187,
        1,0,0,0,1190,1191,6,68,-1,0,1191,1200,3,140,70,0,1192,1200,3,138,
        69,0,1193,1194,5,132,0,0,1194,1195,3,48,24,0,1195,1196,5,151,0,0,
        1196,1200,1,0,0,0,1197,1200,3,124,62,0,1198,1200,3,164,82,0,1199,
        1190,1,0,0,0,1199,1192,1,0,0,0,1199,1193,1,0,0,0,1199,1197,1,0,0,
        0,1199,1198,1,0,0,0,1200,1209,1,0,0,0,1201,1205,10,3,0,0,1202,1206,
        3,158,79,0,1203,1204,5,6,0,0,1204,1206,3,160,80,0,1205,1202,1,0,
        0,0,1205,1203,1,0,0,0,1206,1208,1,0,0,0,1207,1201,1,0,0,0,1208,1211,
        1,0,0,0,1209,1207,1,0,0,0,1209,1210,1,0,0,0,1210,137,1,0,0,0,1211,
        1209,1,0,0,0,1212,1213,3,160,80,0,1213,1215,5,132,0,0,1214,1216,
        3,142,71,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,
        1217,1218,5,151,0,0,1218,139,1,0,0,0,1219,1220,3,144,72,0,1220,1221,
        5,122,0,0,1221,1223,1,0,0,0,1222,1219,1,0,0,0,1222,1223,1,0,0,0,
        1223,1224,1,0,0,0,1224,1225,3,160,80,0,1225,141,1,0,0,0,1226,1231,
        3,120,60,0,1227,1228,5,118,0,0,1228,1230,3,120,60,0,1229,1227,1,
        0,0,0,1230,1233,1,0,0,0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,
        1235,1,0,0,0,1233,1231,1,0,0,0,1234,1236,5,118,0,0,1235,1234,1,0,
        0,0,1235,1236,1,0,0,0,1236,143,1,0,0,0,1237,1238,3,160,80,0,1238,
        145,1,0,0,0,1239,1248,5,108,0,0,1240,1241,5,122,0,0,1241,1248,7,
        12,0,0,1242,1243,5,110,0,0,1243,1245,5,122,0,0,1244,1246,7,12,0,
        0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1248,1,0,0,0,1247,1239,
        1,0,0,0,1247,1240,1,0,0,0,1247,1242,1,0,0,0,1248,147,1,0,0,0,1249,
        1251,7,13,0,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1258,1,0,
        0,0,1252,1259,3,146,73,0,1253,1259,5,109,0,0,1254,1259,5,110,0,0,
        1255,1259,5,111,0,0,1256,1259,5,44,0,0,1257,1259,5,59,0,0,1258,1252,
        1,0,0,0,1258,1253,1,0,0,0,1258,1254,1,0,0,0,1258,1255,1,0,0,0,1258,
        1256,1,0,0,0,1258,1257,1,0,0,0,1259,149,1,0,0,0,1260,1264,3,148,
        74,0,1261,1264,5,112,0,0,1262,1264,5,61,0,0,1263,1260,1,0,0,0,1263,
        1261,1,0,0,0,1263,1262,1,0,0,0,1264,151,1,0,0,0,1265,1266,7,14,0,
        0,1266,153,1,0,0,0,1267,1268,7,15,0,0,1268,155,1,0,0,0,1269,1270,
        7,16,0,0,1270,157,1,0,0,0,1271,1274,5,107,0,0,1272,1274,3,156,78,
        0,1273,1271,1,0,0,0,1273,1272,1,0,0,0,1274,159,1,0,0,0,1275,1279,
        5,107,0,0,1276,1279,3,152,76,0,1277,1279,3,154,77,0,1278,1275,1,
        0,0,0,1278,1276,1,0,0,0,1278,1277,1,0,0,0,1279,161,1,0,0,0,1280,
        1281,3,166,83,0,1281,1282,5,124,0,0,1282,1283,3,148,74,0,1283,163,
        1,0,0,0,1284,1285,5,130,0,0,1285,1286,3,120,60,0,1286,1287,5,149,
        0,0,1287,165,1,0,0,0,1288,1291,5,112,0,0,1289,1291,3,168,84,0,1290,
        1288,1,0,0,0,1290,1289,1,0,0,0,1291,167,1,0,0,0,1292,1296,5,144,
        0,0,1293,1295,3,170,85,0,1294,1293,1,0,0,0,1295,1298,1,0,0,0,1296,
        1294,1,0,0,0,1296,1297,1,0,0,0,1297,1299,1,0,0,0,1298,1296,1,0,0,
        0,1299,1300,5,146,0,0,1300,169,1,0,0,0,1301,1302,5,159,0,0,1302,
        1303,3,120,60,0,1303,1304,5,149,0,0,1304,1307,1,0,0,0,1305,1307,
        5,158,0,0,1306,1301,1,0,0,0,1306,1305,1,0,0,0,1307,171,1,0,0,0,1308,
        1312,5,145,0,0,1309,1311,3,174,87,0,1310,1309,1,0,0,0,1311,1314,
        1,0,0,0,1312,1310,1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,0,0,1314,
        1312,1,0,0,0,1315,1316,5,0,0,1,1316,173,1,0,0,0,1317,1318,5,161,
        0,0,1318,1319,3,120,60,0,1319,1320,5,149,0,0,1320,1323,1,0,0,0,1321,
        1323,5,160,0,0,1322,1317,1,0,0,0,1322,1321,1,0,0,0,1323,175,1,0,
        0,0,171,179,186,195,202,206,220,224,227,231,234,241,245,254,259,
        268,276,283,287,293,298,306,313,319,331,339,353,357,362,371,376,
        382,386,391,399,402,406,409,413,416,419,422,425,429,433,436,439,
        442,446,449,458,464,485,502,519,525,531,542,544,555,558,564,572,
        578,580,584,589,592,595,599,603,606,608,611,615,619,622,624,626,
        631,642,648,655,660,664,668,674,676,683,691,694,697,716,730,746,
        750,761,765,776,780,787,791,798,802,807,816,820,844,861,867,870,
        873,883,889,892,895,903,906,910,913,927,944,949,954,960,967,979,
        983,986,995,1009,1025,1054,1062,1064,1066,1075,1079,1088,1092,1096,
        1101,1108,1119,1128,1135,1148,1155,1159,1171,1177,1180,1187,1199,
        1205,1209,1215,1222,1231,1235,1245,1247,1250,1258,1263,1273,1278,
        1290,1296,1306,1312,1322
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'->'", "'*'", "'`'", "'\\'", "':'", "','", 
                     "'||'", "'-'", "'$'", "'.'", "'=='", "'='", "'>='", 
                     "'>'", "'#'", "'~*'", "'=~*'", "'{'", "'['", "'('", 
                     "'<='", "'<'", "<INVALID>", "'!~*'", "'!~'", "'?.'", 
                     "'??'", "'%'", "'+'", "'?'", "'\"'", "'f''", "'F''", 
                     "'''", "'~'", "'=~'", "'}'", "']'", "')'", "';'", "'/'", 
                     "'_'" ]

    symbolicNames = [ "<INVALID>", "ALL", "AND", "ANTI", "ANY", "ARRAY", 
                      "AS", "ASCENDING", "ASOF", "BETWEEN", "BOTH", "BY", 
                      "CASE", "CAST", "CATCH", "COHORT", "COLLATE", "CROSS", 
                      "CUBE", "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", 
                      "DISTINCT", "ELSE", "END", "EXTRACT", "FINAL", "FINALLY", 
                      "FIRST", "FN", "FOLLOWING", "FOR", "FROM", "FULL", 
                      "FUN", "GROUP", "HAVING", "HOUR", "ID", "IF", "ILIKE", 
                      "IN", "INF", "INNER", "INTERSECT", "INTERVAL", "IS", 
                      "JOIN", "KEY", "LAST", "LEADING", "LEFT", "LET", "LIKE", 
                      "LIMIT", "MINUTE", "MONTH", "NAN_SQL", "NOT", "NULL_SQL", 
                      "NULLS", "OFFSET", "ON", "OR", "ORDER", "OUTER", "OVER", 
                      "PARTITION", "PRECEDING", "PREWHERE", "QUARTER", "RANGE", 
                      "RETURN", "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", 
                      "SECOND", "SELECT", "SEMI", "SETTINGS", "SUBSTRING", 
                      "THEN", "THROW", "TIES", "TIMESTAMP", "TO", "TOP", 
                      "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TRY", "UNBOUNDED", 
                      "UNION", "USING", "WEEK", "WHEN", "WHERE", "WHILE", 
                      "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_COMMON", "IDENTIFIER", 
                      "FLOATING_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", 
                      "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW", 
                      "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", 
                      "CONCAT", "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", "EQ_SINGLE", 
                      "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", "IREGEX_DOUBLE", 
                      "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", "LT", "NOT_EQ", 
                      "NOT_IREGEX", "NOT_REGEX", "NULL_PROPERTY", "NULLISH", 
                      "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE_TEMPLATE", 
                      "QUOTE_SINGLE_TEMPLATE_FULL", "QUOTE_SINGLE", "REGEX_SINGLE", 
                      "REGEX_DOUBLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                      "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                      "WHITESPACE", "STRING_TEXT", "STRING_ESCAPE_TRIGGER", 
                      "FULL_STRING_TEXT", "FULL_STRING_ESCAPE_TRIGGER" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_identifierList = 4
    RULE_statement = 5
    RULE_returnStmt = 6
    RULE_throwStmt = 7
    RULE_catchBlock = 8
    RULE_tryCatchStmt = 9
    RULE_ifStmt = 10
    RULE_whileStmt = 11
    RULE_forStmt = 12
    RULE_forInStmt = 13
    RULE_funcStmt = 14
    RULE_varAssignment = 15
    RULE_exprStmt = 16
    RULE_emptyStmt = 17
    RULE_block = 18
    RULE_kvPair = 19
    RULE_kvPairList = 20
    RULE_select = 21
    RULE_selectIntersectStmt = 22
    RULE_selectUnionStmt = 23
    RULE_selectSetStmt = 24
    RULE_selectStmtWithParens = 25
    RULE_selectStmt = 26
    RULE_withClause = 27
    RULE_topClause = 28
    RULE_fromClause = 29
    RULE_arrayJoinClause = 30
    RULE_windowClause = 31
    RULE_prewhereClause = 32
    RULE_whereClause = 33
    RULE_groupByClause = 34
    RULE_havingClause = 35
    RULE_orderByClause = 36
    RULE_projectionOrderByClause = 37
    RULE_limitAndOffsetClause = 38
    RULE_offsetOnlyClause = 39
    RULE_settingsClause = 40
    RULE_joinExpr = 41
    RULE_joinOp = 42
    RULE_joinOpCross = 43
    RULE_joinConstraintClause = 44
    RULE_sampleClause = 45
    RULE_orderExprList = 46
    RULE_orderExpr = 47
    RULE_ratioExpr = 48
    RULE_settingExprList = 49
    RULE_settingExpr = 50
    RULE_windowExpr = 51
    RULE_winPartitionByClause = 52
    RULE_winOrderByClause = 53
    RULE_winFrameClause = 54
    RULE_winFrameExtend = 55
    RULE_winFrameBound = 56
    RULE_expr = 57
    RULE_columnTypeExpr = 58
    RULE_columnExprList = 59
    RULE_columnExpr = 60
    RULE_columnLambdaExpr = 61
    RULE_hogqlxTagElement = 62
    RULE_hogqlxTagAttribute = 63
    RULE_withExprList = 64
    RULE_withExpr = 65
    RULE_columnIdentifier = 66
    RULE_nestedIdentifier = 67
    RULE_tableExpr = 68
    RULE_tableFunctionExpr = 69
    RULE_tableIdentifier = 70
    RULE_tableArgList = 71
    RULE_databaseIdentifier = 72
    RULE_floatingLiteral = 73
    RULE_numberLiteral = 74
    RULE_literal = 75
    RULE_interval = 76
    RULE_keyword = 77
    RULE_keywordForAlias = 78
    RULE_alias = 79
    RULE_identifier = 80
    RULE_enumValue = 81
    RULE_placeholder = 82
    RULE_string = 83
    RULE_templateString = 84
    RULE_stringContents = 85
    RULE_fullTemplateString = 86
    RULE_stringContentsFull = 87

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "identifierList", 
                   "statement", "returnStmt", "throwStmt", "catchBlock", 
                   "tryCatchStmt", "ifStmt", "whileStmt", "forStmt", "forInStmt", 
                   "funcStmt", "varAssignment", "exprStmt", "emptyStmt", 
                   "block", "kvPair", "kvPairList", "select", "selectIntersectStmt", 
                   "selectUnionStmt", "selectSetStmt", "selectStmtWithParens", 
                   "selectStmt", "withClause", "topClause", "fromClause", 
                   "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitAndOffsetClause", "offsetOnlyClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "orderExprList", 
                   "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
                   "windowExpr", "winPartitionByClause", "winOrderByClause", 
                   "winFrameClause", "winFrameExtend", "winFrameBound", 
                   "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
                   "columnLambdaExpr", "hogqlxTagElement", "hogqlxTagAttribute", 
                   "withExprList", "withExpr", "columnIdentifier", "nestedIdentifier", 
                   "tableExpr", "tableFunctionExpr", "tableIdentifier", 
                   "tableArgList", "databaseIdentifier", "floatingLiteral", 
                   "numberLiteral", "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "enumValue", "placeholder", "string", 
                   "templateString", "stringContents", "fullTemplateString", 
                   "stringContentsFull" ]

    EOF = Token.EOF
    ALL=1
    AND=2
    ANTI=3
    ANY=4
    ARRAY=5
    AS=6
    ASCENDING=7
    ASOF=8
    BETWEEN=9
    BOTH=10
    BY=11
    CASE=12
    CAST=13
    CATCH=14
    COHORT=15
    COLLATE=16
    CROSS=17
    CUBE=18
    CURRENT=19
    DATE=20
    DAY=21
    DESC=22
    DESCENDING=23
    DISTINCT=24
    ELSE=25
    END=26
    EXTRACT=27
    FINAL=28
    FINALLY=29
    FIRST=30
    FN=31
    FOLLOWING=32
    FOR=33
    FROM=34
    FULL=35
    FUN=36
    GROUP=37
    HAVING=38
    HOUR=39
    ID=40
    IF=41
    ILIKE=42
    IN=43
    INF=44
    INNER=45
    INTERSECT=46
    INTERVAL=47
    IS=48
    JOIN=49
    KEY=50
    LAST=51
    LEADING=52
    LEFT=53
    LET=54
    LIKE=55
    LIMIT=56
    MINUTE=57
    MONTH=58
    NAN_SQL=59
    NOT=60
    NULL_SQL=61
    NULLS=62
    OFFSET=63
    ON=64
    OR=65
    ORDER=66
    OUTER=67
    OVER=68
    PARTITION=69
    PRECEDING=70
    PREWHERE=71
    QUARTER=72
    RANGE=73
    RETURN=74
    RIGHT=75
    ROLLUP=76
    ROW=77
    ROWS=78
    SAMPLE=79
    SECOND=80
    SELECT=81
    SEMI=82
    SETTINGS=83
    SUBSTRING=84
    THEN=85
    THROW=86
    TIES=87
    TIMESTAMP=88
    TO=89
    TOP=90
    TOTALS=91
    TRAILING=92
    TRIM=93
    TRUNCATE=94
    TRY=95
    UNBOUNDED=96
    UNION=97
    USING=98
    WEEK=99
    WHEN=100
    WHERE=101
    WHILE=102
    WINDOW=103
    WITH=104
    YEAR=105
    ESCAPE_CHAR_COMMON=106
    IDENTIFIER=107
    FLOATING_LITERAL=108
    OCTAL_LITERAL=109
    DECIMAL_LITERAL=110
    HEXADECIMAL_LITERAL=111
    STRING_LITERAL=112
    ARROW=113
    ASTERISK=114
    BACKQUOTE=115
    BACKSLASH=116
    COLON=117
    COMMA=118
    CONCAT=119
    DASH=120
    DOLLAR=121
    DOT=122
    EQ_DOUBLE=123
    EQ_SINGLE=124
    GT_EQ=125
    GT=126
    HASH=127
    IREGEX_SINGLE=128
    IREGEX_DOUBLE=129
    LBRACE=130
    LBRACKET=131
    LPAREN=132
    LT_EQ=133
    LT=134
    NOT_EQ=135
    NOT_IREGEX=136
    NOT_REGEX=137
    NULL_PROPERTY=138
    NULLISH=139
    PERCENT=140
    PLUS=141
    QUERY=142
    QUOTE_DOUBLE=143
    QUOTE_SINGLE_TEMPLATE=144
    QUOTE_SINGLE_TEMPLATE_FULL=145
    QUOTE_SINGLE=146
    REGEX_SINGLE=147
    REGEX_DOUBLE=148
    RBRACE=149
    RBRACKET=150
    RPAREN=151
    SEMICOLON=152
    SLASH=153
    UNDERSCORE=154
    MULTI_LINE_COMMENT=155
    SINGLE_LINE_COMMENT=156
    WHITESPACE=157
    STRING_TEXT=158
    STRING_ESCAPE_TRIGGER=159
    FULL_STRING_TEXT=160
    FULL_STRING_ESCAPE_TRIGGER=161

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -70369281064962) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972422003392511) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 4212759) != 0):
                self.state = 176
                self.declaration()
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 182
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 184
                self.varDecl()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 120, 122, 130, 131, 132, 134, 141, 144, 152]:
                self.enterOuterAlt(localctx, 2)
                self.state = 185
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(HogQLParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(HogQLParser.LET)
            self.state = 191
            self.identifier()
            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 192
                self.match(HogQLParser.COLON)
                self.state = 193
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 194
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = HogQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.identifier()
            self.state = 202
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 198
                    self.match(HogQLParser.COMMA)
                    self.state = 199
                    self.identifier() 
                self.state = 204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 205
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(HogQLParser.ReturnStmtContext,0)


        def throwStmt(self):
            return self.getTypedRuleContext(HogQLParser.ThrowStmtContext,0)


        def tryCatchStmt(self):
            return self.getTypedRuleContext(HogQLParser.TryCatchStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(HogQLParser.WhileStmtContext,0)


        def forInStmt(self):
            return self.getTypedRuleContext(HogQLParser.ForInStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(HogQLParser.ForStmtContext,0)


        def funcStmt(self):
            return self.getTypedRuleContext(HogQLParser.FuncStmtContext,0)


        def varAssignment(self):
            return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(HogQLParser.EmptyStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        try:
            self.state = 220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 208
                self.returnStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 209
                self.throwStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 210
                self.tryCatchStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 211
                self.ifStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 212
                self.whileStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 213
                self.forInStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 214
                self.forStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 215
                self.funcStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 216
                self.varAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 217
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 218
                self.exprStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 219
                self.emptyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_returnStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = HogQLParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(HogQLParser.RETURN)
            self.state = 224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 223
                self.expression()


            self.state = 227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 226
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(HogQLParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_throwStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStmt" ):
                return visitor.visitThrowStmt(self)
            else:
                return visitor.visitChildren(self)




    def throwStmt(self):

        localctx = HogQLParser.ThrowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_throwStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(HogQLParser.THROW)
            self.state = 231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 230
                self.expression()


            self.state = 234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 233
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catchVar = None # IdentifierContext
            self.catchType = None # IdentifierContext
            self.catchStmt = None # BlockContext

        def CATCH(self):
            return self.getToken(HogQLParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_catchBlock

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchBlock" ):
                return visitor.visitCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def catchBlock(self):

        localctx = HogQLParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(HogQLParser.CATCH)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 237
                self.match(HogQLParser.LPAREN)
                self.state = 238
                localctx.catchVar = self.identifier()
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 239
                    self.match(HogQLParser.COLON)
                    self.state = 240
                    localctx.catchType = self.identifier()


                self.state = 243
                self.match(HogQLParser.RPAREN)


            self.state = 247
            localctx.catchStmt = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tryStmt = None # BlockContext
            self.finallyStmt = None # BlockContext

        def TRY(self):
            return self.getToken(HogQLParser.TRY, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.BlockContext)
            else:
                return self.getTypedRuleContext(HogQLParser.BlockContext,i)


        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(HogQLParser.CatchBlockContext,i)


        def FINALLY(self):
            return self.getToken(HogQLParser.FINALLY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tryCatchStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatchStmt" ):
                return visitor.visitTryCatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryCatchStmt(self):

        localctx = HogQLParser.TryCatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tryCatchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(HogQLParser.TRY)
            self.state = 250
            localctx.tryStmt = self.block()
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14:
                self.state = 251
                self.catchBlock()
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 257
                self.match(HogQLParser.FINALLY)
                self.state = 258
                localctx.finallyStmt = self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(HogQLParser.IF)
            self.state = 262
            self.match(HogQLParser.LPAREN)
            self.state = 263
            self.expression()
            self.state = 264
            self.match(HogQLParser.RPAREN)
            self.state = 265
            self.statement()
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 266
                self.match(HogQLParser.ELSE)
                self.state = 267
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(HogQLParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = HogQLParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(HogQLParser.WHILE)
            self.state = 271
            self.match(HogQLParser.LPAREN)
            self.state = 272
            self.expression()
            self.state = 273
            self.match(HogQLParser.RPAREN)
            self.state = 274
            self.statement()
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 275
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initializerVarDeclr = None # VarDeclContext
            self.initializerVarAssignment = None # VarAssignmentContext
            self.initializerExpression = None # ExpressionContext
            self.condition = None # ExpressionContext
            self.incrementVarDeclr = None # VarDeclContext
            self.incrementVarAssignment = None # VarAssignmentContext
            self.incrementExpression = None # ExpressionContext

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.SEMICOLON)
            else:
                return self.getToken(HogQLParser.SEMICOLON, i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def varDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.VarDeclContext)
            else:
                return self.getTypedRuleContext(HogQLParser.VarDeclContext,i)


        def varAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.VarAssignmentContext)
            else:
                return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_forStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = HogQLParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(HogQLParser.FOR)
            self.state = 279
            self.match(HogQLParser.LPAREN)
            self.state = 283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 280
                localctx.initializerVarDeclr = self.varDecl()

            elif la_ == 2:
                self.state = 281
                localctx.initializerVarAssignment = self.varAssignment()

            elif la_ == 3:
                self.state = 282
                localctx.initializerExpression = self.expression()


            self.state = 285
            self.match(HogQLParser.SEMICOLON)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                self.state = 286
                localctx.condition = self.expression()


            self.state = 289
            self.match(HogQLParser.SEMICOLON)
            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 290
                localctx.incrementVarDeclr = self.varDecl()

            elif la_ == 2:
                self.state = 291
                localctx.incrementVarAssignment = self.varAssignment()

            elif la_ == 3:
                self.state = 292
                localctx.incrementExpression = self.expression()


            self.state = 295
            self.match(HogQLParser.RPAREN)
            self.state = 296
            self.statement()
            self.state = 298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 297
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def LET(self):
            return self.getToken(HogQLParser.LET, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_forInStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInStmt" ):
                return visitor.visitForInStmt(self)
            else:
                return visitor.visitChildren(self)




    def forInStmt(self):

        localctx = HogQLParser.ForInStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_forInStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(HogQLParser.FOR)
            self.state = 301
            self.match(HogQLParser.LPAREN)
            self.state = 302
            self.match(HogQLParser.LET)
            self.state = 303
            self.identifier()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 304
                self.match(HogQLParser.COMMA)
                self.state = 305
                self.identifier()


            self.state = 308
            self.match(HogQLParser.IN)
            self.state = 309
            self.expression()
            self.state = 310
            self.match(HogQLParser.RPAREN)
            self.state = 311
            self.statement()
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 312
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def FN(self):
            return self.getToken(HogQLParser.FN, 0)

        def FUN(self):
            return self.getToken(HogQLParser.FUN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_funcStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncStmt" ):
                return visitor.visitFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def funcStmt(self):

        localctx = HogQLParser.FuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            _la = self._input.LA(1)
            if not(_la==31 or _la==36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 316
            self.identifier()
            self.state = 317
            self.match(HogQLParser.LPAREN)
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2900406192360669186) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12917109948415) != 0):
                self.state = 318
                self.identifierList()


            self.state = 321
            self.match(HogQLParser.RPAREN)
            self.state = 322
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_varAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAssignment" ):
                return visitor.visitVarAssignment(self)
            else:
                return visitor.visitChildren(self)




    def varAssignment(self):

        localctx = HogQLParser.VarAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_varAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.expression()
            self.state = 325
            self.match(HogQLParser.COLON)
            self.state = 326
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 327
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.expression()
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 330
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_emptyStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStmt" ):
                return visitor.visitEmptyStmt(self)
            else:
                return visitor.visitChildren(self)




    def emptyStmt(self):

        localctx = HogQLParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(HogQLParser.LBRACE)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -70369281064962) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972422003392511) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 4212759) != 0):
                self.state = 336
                self.declaration()
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 342
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPair" ):
                return visitor.visitKvPair(self)
            else:
                return visitor.visitChildren(self)




    def kvPair(self):

        localctx = HogQLParser.KvPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_kvPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.expression()
            self.state = 345
            self.match(HogQLParser.COLON)
            self.state = 346
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kvPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.KvPairContext)
            else:
                return self.getTypedRuleContext(HogQLParser.KvPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPairList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPairList" ):
                return visitor.visitKvPairList(self)
            else:
                return visitor.visitChildren(self)




    def kvPairList(self):

        localctx = HogQLParser.KvPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_kvPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.kvPair()
            self.state = 353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 349
                    self.match(HogQLParser.COMMA)
                    self.state = 350
                    self.kvPair() 
                self.state = 355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 356
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 359
                self.selectSetStmt()
                pass

            elif la_ == 2:
                self.state = 360
                self.selectStmt()
                pass

            elif la_ == 3:
                self.state = 361
                self.hogqlxTagElement()
                pass


            self.state = 364
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectIntersectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.INTERSECT)
            else:
                return self.getToken(HogQLParser.INTERSECT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectIntersectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectIntersectStmt" ):
                return visitor.visitSelectIntersectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectIntersectStmt(self):

        localctx = HogQLParser.SelectIntersectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_selectIntersectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.selectStmtWithParens()
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 367
                self.match(HogQLParser.INTERSECT)
                self.state = 368
                self.selectStmtWithParens()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def selectIntersectStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectIntersectStmtContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectIntersectStmtContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 374
                self.selectStmtWithParens()
                pass

            elif la_ == 2:
                self.state = 375
                self.selectIntersectStmt()
                pass


            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97:
                self.state = 378
                self.match(HogQLParser.UNION)
                self.state = 379
                self.match(HogQLParser.ALL)
                self.state = 382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 380
                    self.selectStmtWithParens()
                    pass

                elif la_ == 2:
                    self.state = 381
                    self.selectIntersectStmt()
                    pass


                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectIntersectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectIntersectStmtContext,0)


        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectSetStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSetStmt" ):
                return visitor.visitSelectSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectSetStmt(self):

        localctx = HogQLParser.SelectSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_selectSetStmt)
        try:
            self.state = 391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 389
                self.selectIntersectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self.selectUnionStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_selectStmtWithParens)
        try:
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self.selectStmt()
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 394
                self.match(HogQLParser.LPAREN)
                self.state = 395
                self.selectSetStmt()
                self.state = 396
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 3)
                self.state = 398
                self.placeholder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 401
                localctx.with_ = self.withClause()


            self.state = 404
            self.match(HogQLParser.SELECT)
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 405
                self.match(HogQLParser.DISTINCT)


            self.state = 409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 408
                self.topClause()


            self.state = 411
            localctx.columns = self.columnExprList()
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 412
                localctx.from_ = self.fromClause()


            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9042383626829856) != 0):
                self.state = 415
                self.arrayJoinClause()


            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 418
                self.prewhereClause()


            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 421
                localctx.where = self.whereClause()


            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 424
                self.groupByClause()


            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 427
                self.match(HogQLParser.WITH)
                self.state = 428
                _la = self._input.LA(1)
                if not(_la==18 or _la==76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 431
                self.match(HogQLParser.WITH)
                self.state = 432
                self.match(HogQLParser.TOTALS)


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 435
                self.havingClause()


            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 438
                self.windowClause()


            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 441
                self.orderByClause()


            self.state = 446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.state = 444
                self.limitAndOffsetClause()
                pass
            elif token in [63]:
                self.state = 445
                self.offsetOnlyClause()
                pass
            elif token in [-1, 46, 83, 97, 151]:
                pass
            else:
                pass
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 448
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(HogQLParser.WITH)
            self.state = 452
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(HogQLParser.TOP)
            self.state = 455
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 456
                self.match(HogQLParser.WITH)
                self.state = 457
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(HogQLParser.FROM)
            self.state = 461
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==53:
                self.state = 463
                _la = self._input.LA(1)
                if not(_la==45 or _la==53):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 466
            self.match(HogQLParser.ARRAY)
            self.state = 467
            self.match(HogQLParser.JOIN)
            self.state = 468
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(HogQLParser.WINDOW)
            self.state = 471
            self.identifier()
            self.state = 472
            self.match(HogQLParser.AS)
            self.state = 473
            self.match(HogQLParser.LPAREN)
            self.state = 474
            self.windowExpr()
            self.state = 475
            self.match(HogQLParser.RPAREN)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==118:
                self.state = 476
                self.match(HogQLParser.COMMA)
                self.state = 477
                self.identifier()
                self.state = 478
                self.match(HogQLParser.AS)
                self.state = 479
                self.match(HogQLParser.LPAREN)
                self.state = 480
                self.windowExpr()
                self.state = 481
                self.match(HogQLParser.RPAREN)
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(HogQLParser.PREWHERE)
            self.state = 489
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(HogQLParser.WHERE)
            self.state = 492
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(HogQLParser.GROUP)
            self.state = 495
            self.match(HogQLParser.BY)
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 496
                _la = self._input.LA(1)
                if not(_la==18 or _la==76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 497
                self.match(HogQLParser.LPAREN)
                self.state = 498
                self.columnExprList()
                self.state = 499
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 501
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(HogQLParser.HAVING)
            self.state = 505
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(HogQLParser.ORDER)
            self.state = 508
            self.match(HogQLParser.BY)
            self.state = 509
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(HogQLParser.ORDER)
            self.state = 512
            self.match(HogQLParser.BY)
            self.state = 513
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 515
                self.match(HogQLParser.LIMIT)
                self.state = 516
                self.columnExpr(0)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 517
                    self.match(HogQLParser.COMMA)
                    self.state = 518
                    self.columnExpr(0)


                self.state = 525
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [104]:
                    self.state = 521
                    self.match(HogQLParser.WITH)
                    self.state = 522
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [11]:
                    self.state = 523
                    self.match(HogQLParser.BY)
                    self.state = 524
                    self.columnExprList()
                    pass
                elif token in [-1, 46, 83, 97, 151]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.match(HogQLParser.LIMIT)
                self.state = 528
                self.columnExpr(0)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 529
                    self.match(HogQLParser.WITH)
                    self.state = 530
                    self.match(HogQLParser.TIES)


                self.state = 533
                self.match(HogQLParser.OFFSET)
                self.state = 534
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.match(HogQLParser.LIMIT)
                self.state = 537
                self.columnExpr(0)
                self.state = 538
                self.match(HogQLParser.OFFSET)
                self.state = 539
                self.columnExpr(0)
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 540
                    self.match(HogQLParser.BY)
                    self.state = 541
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(HogQLParser.OFFSET)
            self.state = 547
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(HogQLParser.SETTINGS)
            self.state = 550
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 553
                self.tableExpr(0)
                self.state = 555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 554
                    self.match(HogQLParser.FINAL)


                self.state = 558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 557
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 560
                self.match(HogQLParser.LPAREN)
                self.state = 561
                self.joinExpr(0)
                self.state = 562
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 580
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 578
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 566
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 567
                        self.joinOpCross()
                        self.state = 568
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 570
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 572
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9042417986568474) != 0) or _la==75 or _la==82:
                            self.state = 571
                            self.joinOp()


                        self.state = 574
                        self.match(HogQLParser.JOIN)
                        self.state = 575
                        self.joinExpr(0)
                        self.state = 576
                        self.joinConstraintClause()
                        pass

             
                self.state = 582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 583
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 586
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 587
                    self.match(HogQLParser.INNER)
                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 588
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 591
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==82:
                        self.state = 594
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==82):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 597
                    _la = self._input.LA(1)
                    if not(_la==53 or _la==75):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67:
                        self.state = 598
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 601
                    _la = self._input.LA(1)
                    if not(_la==53 or _la==75):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67:
                        self.state = 602
                        self.match(HogQLParser.OUTER)


                    self.state = 606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==82:
                        self.state = 605
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==82):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 610
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 613
                    self.match(HogQLParser.FULL)
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67:
                        self.state = 614
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 617
                    self.match(HogQLParser.FULL)
                    self.state = 619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67:
                        self.state = 618
                        self.match(HogQLParser.OUTER)


                    self.state = 622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 621
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_joinOpCross)
        try:
            self.state = 631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.match(HogQLParser.CROSS)
                self.state = 629
                self.match(HogQLParser.JOIN)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 630
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_joinConstraintClause)
        try:
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.match(HogQLParser.ON)
                self.state = 634
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.match(HogQLParser.USING)
                self.state = 636
                self.match(HogQLParser.LPAREN)
                self.state = 637
                self.columnExprList()
                self.state = 638
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 640
                self.match(HogQLParser.USING)
                self.state = 641
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(HogQLParser.SAMPLE)
            self.state = 645
            self.ratioExpr()
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 646
                self.match(HogQLParser.OFFSET)
                self.state = 647
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.orderExpr()
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==118:
                self.state = 651
                self.match(HogQLParser.COMMA)
                self.state = 652
                self.orderExpr()
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.columnExpr(0)
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 12583040) != 0):
                self.state = 659
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 12583040) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 662
                self.match(HogQLParser.NULLS)
                self.state = 663
                _la = self._input.LA(1)
                if not(_la==30 or _la==51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 666
                self.match(HogQLParser.COLLATE)
                self.state = 667
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ratioExpr)
        try:
            self.state = 676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.placeholder()
                pass
            elif token in [44, 59, 108, 109, 110, 111, 120, 122, 141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.numberLiteral()
                self.state = 674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 672
                    self.match(HogQLParser.SLASH)
                    self.state = 673
                    self.numberLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.settingExpr()
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==118:
                self.state = 679
                self.match(HogQLParser.COMMA)
                self.state = 680
                self.settingExpr()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.identifier()
            self.state = 687
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 688
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 690
                self.winPartitionByClause()


            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 693
                self.winOrderByClause()


            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73 or _la==78:
                self.state = 696
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(HogQLParser.PARTITION)
            self.state = 700
            self.match(HogQLParser.BY)
            self.state = 701
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(HogQLParser.ORDER)
            self.state = 704
            self.match(HogQLParser.BY)
            self.state = 705
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            _la = self._input.LA(1)
            if not(_la==73 or _la==78):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 708
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_winFrameExtend)
        try:
            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 44, 59, 96, 108, 109, 110, 111, 120, 122, 141]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 710
                self.winFrameBound()
                pass
            elif token in [9]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self.match(HogQLParser.BETWEEN)
                self.state = 712
                self.winFrameBound()
                self.state = 713
                self.match(HogQLParser.AND)
                self.state = 714
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 718
                self.match(HogQLParser.CURRENT)
                self.state = 719
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 720
                self.match(HogQLParser.UNBOUNDED)
                self.state = 721
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 722
                self.match(HogQLParser.UNBOUNDED)
                self.state = 723
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 724
                self.numberLiteral()
                self.state = 725
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 727
                self.numberLiteral()
                self.state = 728
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.columnExpr(0)
            self.state = 733
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.identifier()
                self.state = 737
                self.match(HogQLParser.LPAREN)
                self.state = 738
                self.identifier()
                self.state = 739
                self.columnTypeExpr()
                self.state = 746
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 740
                        self.match(HogQLParser.COMMA)
                        self.state = 741
                        self.identifier()
                        self.state = 742
                        self.columnTypeExpr() 
                    self.state = 748
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 749
                    self.match(HogQLParser.COMMA)


                self.state = 752
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                self.identifier()
                self.state = 755
                self.match(HogQLParser.LPAREN)
                self.state = 756
                self.enumValue()
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 757
                        self.match(HogQLParser.COMMA)
                        self.state = 758
                        self.enumValue() 
                    self.state = 763
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 764
                    self.match(HogQLParser.COMMA)


                self.state = 767
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 769
                self.identifier()
                self.state = 770
                self.match(HogQLParser.LPAREN)
                self.state = 771
                self.columnTypeExpr()
                self.state = 776
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 772
                        self.match(HogQLParser.COMMA)
                        self.state = 773
                        self.columnTypeExpr() 
                    self.state = 778
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 779
                    self.match(HogQLParser.COMMA)


                self.state = 782
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 784
                self.identifier()
                self.state = 785
                self.match(HogQLParser.LPAREN)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                    self.state = 786
                    self.columnExprList()


                self.state = 789
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.columnExpr(0)
            self.state = 798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 794
                    self.match(HogQLParser.COMMA)
                    self.state = 795
                    self.columnExpr(0) 
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 801
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDictContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)
        def kvPairList(self):
            return self.getTypedRuleContext(HogQLParser.KvPairListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDict" ):
                return visitor.visitColumnExprDict(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullTupleAccess" ):
                return visitor.visitColumnExprNullTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullPropertyAccess" ):
                return visitor.visitColumnExprNullPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTagElementContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTagElement" ):
                return visitor.visitColumnExprTagElement(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTemplateStringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTemplateString" ):
                return visitor.visitColumnExprTemplateString(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCallContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCall" ):
                return visitor.visitColumnExprCall(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullArrayAccess" ):
                return visitor.visitColumnExprNullArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLambdaContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLambda" ):
                return visitor.visitColumnExprLambda(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 805
                self.match(HogQLParser.CASE)
                self.state = 807
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 806
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 814 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 809
                    self.match(HogQLParser.WHEN)
                    self.state = 810
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 811
                    self.match(HogQLParser.THEN)
                    self.state = 812
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 816 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==100):
                        break

                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 818
                    self.match(HogQLParser.ELSE)
                    self.state = 819
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 822
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 824
                self.match(HogQLParser.CAST)
                self.state = 825
                self.match(HogQLParser.LPAREN)
                self.state = 826
                self.columnExpr(0)
                self.state = 827
                self.match(HogQLParser.AS)
                self.state = 828
                self.columnTypeExpr()
                self.state = 829
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 831
                self.match(HogQLParser.DATE)
                self.state = 832
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 833
                self.match(HogQLParser.INTERVAL)
                self.state = 834
                self.columnExpr(0)
                self.state = 835
                self.interval()
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 837
                self.match(HogQLParser.SUBSTRING)
                self.state = 838
                self.match(HogQLParser.LPAREN)
                self.state = 839
                self.columnExpr(0)
                self.state = 840
                self.match(HogQLParser.FROM)
                self.state = 841
                self.columnExpr(0)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 842
                    self.match(HogQLParser.FOR)
                    self.state = 843
                    self.columnExpr(0)


                self.state = 846
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 848
                self.match(HogQLParser.TIMESTAMP)
                self.state = 849
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 850
                self.match(HogQLParser.TRIM)
                self.state = 851
                self.match(HogQLParser.LPAREN)
                self.state = 852
                _la = self._input.LA(1)
                if not(_la==10 or _la==52 or _la==92):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 853
                self.string()
                self.state = 854
                self.match(HogQLParser.FROM)
                self.state = 855
                self.columnExpr(0)
                self.state = 856
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 858
                self.identifier()

                self.state = 859
                self.match(HogQLParser.LPAREN)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                    self.state = 860
                    localctx.columnExprs = self.columnExprList()


                self.state = 863
                self.match(HogQLParser.RPAREN)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 865
                    self.match(HogQLParser.LPAREN)
                    self.state = 867
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        self.state = 866
                        self.match(HogQLParser.DISTINCT)


                    self.state = 870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                        self.state = 869
                        localctx.columnArgList = self.columnExprList()


                    self.state = 872
                    self.match(HogQLParser.RPAREN)


                self.state = 875
                self.match(HogQLParser.OVER)
                self.state = 876
                self.match(HogQLParser.LPAREN)
                self.state = 877
                self.windowExpr()
                self.state = 878
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 880
                self.identifier()

                self.state = 881
                self.match(HogQLParser.LPAREN)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                    self.state = 882
                    localctx.columnExprs = self.columnExprList()


                self.state = 885
                self.match(HogQLParser.RPAREN)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 887
                    self.match(HogQLParser.LPAREN)
                    self.state = 889
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                    if la_ == 1:
                        self.state = 888
                        self.match(HogQLParser.DISTINCT)


                    self.state = 892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                        self.state = 891
                        localctx.columnArgList = self.columnExprList()


                    self.state = 894
                    self.match(HogQLParser.RPAREN)


                self.state = 897
                self.match(HogQLParser.OVER)
                self.state = 898
                self.identifier()
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 900
                self.identifier()
                self.state = 906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.match(HogQLParser.LPAREN)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                        self.state = 902
                        localctx.columnExprs = self.columnExprList()


                    self.state = 905
                    self.match(HogQLParser.RPAREN)


                self.state = 908
                self.match(HogQLParser.LPAREN)
                self.state = 910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 909
                    self.match(HogQLParser.DISTINCT)


                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                    self.state = 912
                    localctx.columnArgList = self.columnExprList()


                self.state = 915
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprTagElementContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 917
                self.hogqlxTagElement()
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprTemplateStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 918
                self.templateString()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 919
                self.literal()
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 920
                self.match(HogQLParser.DASH)
                self.state = 921
                self.columnExpr(20)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 922
                self.match(HogQLParser.NOT)
                self.state = 923
                self.columnExpr(14)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2900406192360669186) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12917109948415) != 0):
                    self.state = 924
                    self.tableIdentifier()
                    self.state = 925
                    self.match(HogQLParser.DOT)


                self.state = 929
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 930
                self.match(HogQLParser.LPAREN)
                self.state = 931
                self.selectSetStmt()
                self.state = 932
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 934
                self.match(HogQLParser.LPAREN)
                self.state = 935
                self.columnExpr(0)
                self.state = 936
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 938
                self.match(HogQLParser.LPAREN)
                self.state = 939
                self.columnExprList()
                self.state = 940
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 942
                self.match(HogQLParser.LBRACKET)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                    self.state = 943
                    self.columnExprList()


                self.state = 946
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 21:
                localctx = HogQLParser.ColumnExprDictContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 947
                self.match(HogQLParser.LBRACE)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                    self.state = 948
                    self.kvPairList()


                self.state = 951
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 22:
                localctx = HogQLParser.ColumnExprLambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 952
                self.columnLambdaExpr()
                pass

            elif la_ == 23:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 953
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1066
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1064
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 956
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 960
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [114]:
                            self.state = 957
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [153]:
                            self.state = 958
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [140]:
                            self.state = 959
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 962
                        localctx.right = self.columnExpr(20)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 963
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 967
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [141]:
                            self.state = 964
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [120]:
                            self.state = 965
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [119]:
                            self.state = 966
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 969
                        localctx.right = self.columnExpr(19)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 970
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 995
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                        if la_ == 1:
                            self.state = 971
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 972
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 973
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 974
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 975
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 976
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 977
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 979
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==60:
                                self.state = 978
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 981
                            self.match(HogQLParser.IN)
                            self.state = 983
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                            if la_ == 1:
                                self.state = 982
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 986
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==60:
                                self.state = 985
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 988
                            _la = self._input.LA(1)
                            if not(_la==42 or _la==55):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 989
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 990
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 991
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 992
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 993
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 994
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 997
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 998
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 999
                        self.match(HogQLParser.NULLISH)
                        self.state = 1000
                        self.columnExpr(16)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1001
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1002
                        self.match(HogQLParser.AND)
                        self.state = 1003
                        self.columnExpr(14)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1004
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1005
                        self.match(HogQLParser.OR)
                        self.state = 1006
                        self.columnExpr(13)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1007
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1009
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 1008
                            self.match(HogQLParser.NOT)


                        self.state = 1011
                        self.match(HogQLParser.BETWEEN)
                        self.state = 1012
                        self.columnExpr(0)
                        self.state = 1013
                        self.match(HogQLParser.AND)
                        self.state = 1014
                        self.columnExpr(12)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1016
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1017
                        self.match(HogQLParser.QUERY)
                        self.state = 1018
                        self.columnExpr(0)
                        self.state = 1019
                        self.match(HogQLParser.COLON)
                        self.state = 1020
                        self.columnExpr(10)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprCallContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1022
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1023
                        self.match(HogQLParser.LPAREN)
                        self.state = 1025
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                            self.state = 1024
                            self.columnExprList()


                        self.state = 1027
                        self.match(HogQLParser.RPAREN)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1028
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1029
                        self.match(HogQLParser.LBRACKET)
                        self.state = 1030
                        self.columnExpr(0)
                        self.state = 1031
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1033
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1034
                        self.match(HogQLParser.DOT)
                        self.state = 1035
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1036
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1037
                        self.match(HogQLParser.DOT)
                        self.state = 1038
                        self.identifier()
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprNullArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1039
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1040
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1041
                        self.match(HogQLParser.LBRACKET)
                        self.state = 1042
                        self.columnExpr(0)
                        self.state = 1043
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 14:
                        localctx = HogQLParser.ColumnExprNullTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1045
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1046
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1047
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 15:
                        localctx = HogQLParser.ColumnExprNullPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1048
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1049
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1050
                        self.identifier()
                        pass

                    elif la_ == 16:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1051
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1052
                        self.match(HogQLParser.IS)
                        self.state = 1054
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 1053
                            self.match(HogQLParser.NOT)


                        self.state = 1056
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 17:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1057
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1062
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                        if la_ == 1:
                            self.state = 1058
                            self.match(HogQLParser.AS)
                            self.state = 1059
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1060
                            self.match(HogQLParser.AS)
                            self.state = 1061
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 1068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1069
                self.match(HogQLParser.LPAREN)
                self.state = 1070
                self.identifier()
                self.state = 1075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1071
                        self.match(HogQLParser.COMMA)
                        self.state = 1072
                        self.identifier() 
                    self.state = 1077
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1078
                    self.match(HogQLParser.COMMA)


                self.state = 1081
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 1083
                self.identifier()
                self.state = 1088
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1084
                        self.match(HogQLParser.COMMA)
                        self.state = 1085
                        self.identifier() 
                    self.state = 1090
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1091
                    self.match(HogQLParser.COMMA)


                pass

            elif la_ == 3:
                self.state = 1094
                self.match(HogQLParser.LPAREN)
                self.state = 1095
                self.match(HogQLParser.RPAREN)
                pass


            self.state = 1098
            self.match(HogQLParser.ARROW)
            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1099
                self.columnExpr(0)
                pass

            elif la_ == 2:
                self.state = 1100
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HogqlxTagElementClosedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementClosed" ):
                return visitor.visitHogqlxTagElementClosed(self)
            else:
                return visitor.visitChildren(self)


    class HogqlxTagElementNestedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LT)
            else:
                return self.getToken(HogQLParser.LT, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.GT)
            else:
                return self.getToken(HogQLParser.GT, i)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementNested" ):
                return visitor.visitHogqlxTagElementNested(self)
            else:
                return visitor.visitChildren(self)



    def hogqlxTagElement(self):

        localctx = HogQLParser.HogqlxTagElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_hogqlxTagElement)
        self._la = 0 # Token type
        try:
            self.state = 1135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.HogqlxTagElementClosedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                self.match(HogQLParser.LT)
                self.state = 1104
                self.identifier()
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2900406192360669186) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12917109948415) != 0):
                    self.state = 1105
                    self.hogqlxTagAttribute()
                    self.state = 1110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1111
                self.match(HogQLParser.SLASH)
                self.state = 1112
                self.match(HogQLParser.GT)
                pass

            elif la_ == 2:
                localctx = HogQLParser.HogqlxTagElementNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(HogQLParser.LT)
                self.state = 1115
                self.identifier()
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2900406192360669186) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12917109948415) != 0):
                    self.state = 1116
                    self.hogqlxTagAttribute()
                    self.state = 1121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1122
                self.match(HogQLParser.GT)
                self.state = 1128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1123
                    self.hogqlxTagElement()

                elif la_ == 2:
                    self.state = 1124
                    self.match(HogQLParser.LBRACE)
                    self.state = 1125
                    self.columnExpr(0)
                    self.state = 1126
                    self.match(HogQLParser.RBRACE)


                self.state = 1130
                self.match(HogQLParser.LT)
                self.state = 1131
                self.match(HogQLParser.SLASH)
                self.state = 1132
                self.identifier()
                self.state = 1133
                self.match(HogQLParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagAttribute" ):
                return visitor.visitHogqlxTagAttribute(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxTagAttribute(self):

        localctx = HogQLParser.HogqlxTagAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_hogqlxTagAttribute)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1137
                self.identifier()
                self.state = 1138
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1139
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1141
                self.identifier()
                self.state = 1142
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1143
                self.match(HogQLParser.LBRACE)
                self.state = 1144
                self.columnExpr(0)
                self.state = 1145
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1147
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.withExpr()
            self.state = 1155
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1151
                    self.match(HogQLParser.COMMA)
                    self.state = 1152
                    self.withExpr() 
                self.state = 1157
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1158
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_withExpr)
        try:
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                self.identifier()
                self.state = 1162
                self.match(HogQLParser.AS)
                self.state = 1163
                self.match(HogQLParser.LPAREN)
                self.state = 1164
                self.selectSetStmt()
                self.state = 1165
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.columnExpr(0)
                self.state = 1168
                self.match(HogQLParser.AS)
                self.state = 1169
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_columnIdentifier)
        try:
            self.state = 1180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.placeholder()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1174
                    self.tableIdentifier()
                    self.state = 1175
                    self.match(HogQLParser.DOT)


                self.state = 1179
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.identifier()
            self.state = 1187
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1183
                    self.match(HogQLParser.DOT)
                    self.state = 1184
                    self.identifier() 
                self.state = 1189
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprTagContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprTag" ):
                return visitor.visitTableExprTag(self)
            else:
                return visitor.visitChildren(self)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprPlaceholderContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprPlaceholder" ):
                return visitor.visitTableExprPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1191
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1192
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1193
                self.match(HogQLParser.LPAREN)
                self.state = 1194
                self.selectSetStmt()
                self.state = 1195
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.TableExprTagContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1197
                self.hogqlxTagElement()
                pass

            elif la_ == 5:
                localctx = HogQLParser.TableExprPlaceholderContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1198
                self.placeholder()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1209
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1201
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1205
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [20, 30, 40, 50, 107]:
                        self.state = 1202
                        self.alias()
                        pass
                    elif token in [6]:
                        self.state = 1203
                        self.match(HogQLParser.AS)
                        self.state = 1204
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1211
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.identifier()
            self.state = 1213
            self.match(HogQLParser.LPAREN)
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -18084838657507330) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 361972144973807615) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18455) != 0):
                self.state = 1214
                self.tableArgList()


            self.state = 1217
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1219
                self.databaseIdentifier()
                self.state = 1220
                self.match(HogQLParser.DOT)


            self.state = 1224
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.columnExpr(0)
            self.state = 1231
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1227
                    self.match(HogQLParser.COMMA)
                    self.state = 1228
                    self.columnExpr(0) 
                self.state = 1233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1234
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1239
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self.match(HogQLParser.DOT)
                self.state = 1241
                _la = self._input.LA(1)
                if not(_la==109 or _la==110):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1242
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 1243
                self.match(HogQLParser.DOT)
                self.state = 1245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1244
                    _la = self._input.LA(1)
                    if not(_la==109 or _la==110):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120 or _la==141:
                self.state = 1249
                _la = self._input.LA(1)
                if not(_la==120 or _la==141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1252
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1253
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1254
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1255
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1256
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 1257
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_literal)
        try:
            self.state = 1263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 59, 108, 109, 110, 111, 120, 122, 141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1260
                self.numberLiteral()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1262
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 432346113985478656) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 8724152577) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -3332752306346147842) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1887633866495) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1127000493260800) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_alias)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [20, 30, 40, 50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_identifier)
        try:
            self.state = 1278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1275
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [21, 39, 57, 58, 72, 80, 99, 105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1276
                self.interval()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 103, 104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1277
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.string()
            self.state = 1281
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 1282
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_placeholder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholder" ):
                return visitor.visitPlaceholder(self)
            else:
                return visitor.visitChildren(self)




    def placeholder(self):

        localctx = HogQLParser.PlaceholderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_placeholder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(HogQLParser.LBRACE)
            self.state = 1285
            self.columnExpr(0)
            self.state = 1286
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = HogQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_string)
        try:
            self.state = 1290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1288
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1289
                self.templateString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE, 0)

        def QUOTE_SINGLE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE, 0)

        def stringContents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_templateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateString" ):
                return visitor.visitTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def templateString(self):

        localctx = HogQLParser.TemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_templateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE)
            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==158 or _la==159:
                self.state = 1293
                self.stringContents()
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1299
            self.match(HogQLParser.QUOTE_SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def STRING_TEXT(self):
            return self.getToken(HogQLParser.STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContents

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContents" ):
                return visitor.visitStringContents(self)
            else:
                return visitor.visitChildren(self)




    def stringContents(self):

        localctx = HogQLParser.StringContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_stringContents)
        try:
            self.state = 1306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [159]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.match(HogQLParser.STRING_ESCAPE_TRIGGER)
                self.state = 1302
                self.columnExpr(0)
                self.state = 1303
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.match(HogQLParser.STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullTemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE_FULL(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL, 0)

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def stringContentsFull(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsFullContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsFullContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_fullTemplateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullTemplateString" ):
                return visitor.visitFullTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def fullTemplateString(self):

        localctx = HogQLParser.FullTemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_fullTemplateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL)
            self.state = 1312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==160 or _la==161:
                self.state = 1309
                self.stringContentsFull()
                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1315
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsFullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL_STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.FULL_STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def FULL_STRING_TEXT(self):
            return self.getToken(HogQLParser.FULL_STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContentsFull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContentsFull" ):
                return visitor.visitStringContentsFull(self)
            else:
                return visitor.visitChildren(self)




    def stringContentsFull(self):

        localctx = HogQLParser.StringContentsFullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_stringContentsFull)
        try:
            self.state = 1322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1317
                self.match(HogQLParser.FULL_STRING_ESCAPE_TRIGGER)
                self.state = 1318
                self.columnExpr(0)
                self.state = 1319
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.match(HogQLParser.FULL_STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[41] = self.joinExpr_sempred
        self._predicates[60] = self.columnExpr_sempred
        self._predicates[68] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 9)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 3)
         




