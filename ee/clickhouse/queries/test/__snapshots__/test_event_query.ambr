# serializer version: 1
# name: TestEventQuery.test_account_filters
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version = NULL
  '''
# ---
# name: TestEventQuery.test_account_filters.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version = 0
  '''
# ---
# name: TestEventQuery.test_account_filters.2
  '''
  SELECT e.timestamp as timestamp,
         if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id
  FROM events e
  LEFT OUTER JOIN
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 99999
       AND distinct_id IN
         (SELECT distinct_id
          FROM events
          WHERE team_id = 99999
            AND event = 'event_name'
            AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2021-01-14 00:00:00', 'UTC')), 'UTC')
            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2021-01-21 23:59:59', 'UTC'))
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
  INNER JOIN
    (SELECT id
     FROM person
     WHERE team_id = 99999
       AND id IN
         (SELECT id
          FROM person
          WHERE team_id = 99999
            AND (has(['Jane'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', ''))) )
     GROUP BY id
     HAVING max(is_deleted) = 0
     AND (has(['Jane'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
  WHERE team_id = 99999
    AND event = 'event_name'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2021-01-14 00:00:00', 'UTC')), 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2021-01-21 23:59:59', 'UTC')
  '''
# ---
# name: TestEventQuery.test_basic_event_filter
  '''
  SELECT e.timestamp as timestamp
  FROM events e
  WHERE team_id = 99999
    AND event = 'viewed'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2021-05-01 00:00:00', 'UTC')), 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2021-05-07 23:59:59', 'UTC')
  '''
# ---
# name: TestEventQuery.test_cohort_filter
  '''
  SELECT e.timestamp as timestamp,
         if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id
  FROM events e
  LEFT OUTER JOIN
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 99999
       AND distinct_id IN
         (SELECT distinct_id
          FROM events
          WHERE team_id = 99999
            AND event = 'viewed'
            AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2021-05-01 00:00:00', 'UTC')), 'UTC')
            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2021-05-07 23:59:59', 'UTC'))
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
  INNER JOIN
    (SELECT id
     FROM person
     WHERE team_id = 99999
     GROUP BY id
     HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
  WHERE team_id = 99999
    AND event = 'viewed'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2021-05-01 00:00:00', 'UTC')), 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2021-05-07 23:59:59', 'UTC')
    AND (if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) IN
           (SELECT id
            FROM person
            WHERE team_id = 99999
              AND id IN
                (SELECT id
                 FROM person
                 WHERE team_id = 99999
                   AND ((has(['test'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', '')))) )
            GROUP BY id
            HAVING max(is_deleted) = 0
            AND ((has(['test'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1))
  '''
# ---
# name: TestEventQuery.test_denormalised_props
  '''
  SELECT e.timestamp as timestamp,
         e."mat_test_prop" as "mat_test_prop"
  FROM events e
  WHERE team_id = 99999
    AND event = 'user signed up'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-14 23:59:59', 'UTC')
    AND ((has(['hi'], "mat_test_prop"))
         AND (has(['hi'], "mat_test_prop")))
  '''
# ---
